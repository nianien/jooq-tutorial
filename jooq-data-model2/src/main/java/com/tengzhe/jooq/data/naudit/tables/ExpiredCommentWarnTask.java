/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.ExpiredCommentWarnTaskRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExpiredCommentWarnTask extends TableImpl<ExpiredCommentWarnTaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.expired_comment_warn_task</code>
     */
    public static final ExpiredCommentWarnTask EXPIRED_COMMENT_WARN_TASK = new ExpiredCommentWarnTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpiredCommentWarnTaskRecord> getRecordType() {
        return ExpiredCommentWarnTaskRecord.class;
    }

    /**
     * The column <code>naudit.expired_comment_warn_task.id</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.comment_id</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, Long> COMMENT_ID = createField(DSL.name("comment_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.comment_type</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, Integer> COMMENT_TYPE = createField(DSL.name("comment_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.target_id</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, Long> TARGET_ID = createField(DSL.name("target_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.target_type</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, Integer> TARGET_TYPE = createField(DSL.name("target_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.biz_type</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, String> BIZ_TYPE = createField(DSL.name("biz_type"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.content</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.expire_time</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, LocalDateTime> EXPIRE_TIME = createField(DSL.name("expire_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column
     * <code>naudit.expired_comment_warn_task.comment_operator</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, Long> COMMENT_OPERATOR = createField(DSL.name("comment_operator"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>naudit.expired_comment_warn_task.comment_create_time</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, LocalDateTime> COMMENT_CREATE_TIME = createField(DSL.name("comment_create_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.state</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.operator</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, Long> OPERATOR = createField(DSL.name("operator"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.create_time</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>naudit.expired_comment_warn_task.handle_time</code>.
     */
    public final TableField<ExpiredCommentWarnTaskRecord, LocalDateTime> HANDLE_TIME = createField(DSL.name("handle_time"), SQLDataType.LOCALDATETIME(6), this, "");

    private ExpiredCommentWarnTask(Name alias, Table<ExpiredCommentWarnTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExpiredCommentWarnTask(Name alias, Table<ExpiredCommentWarnTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.expired_comment_warn_task</code> table
     * reference
     */
    public ExpiredCommentWarnTask(String alias) {
        this(DSL.name(alias), EXPIRED_COMMENT_WARN_TASK);
    }

    /**
     * Create an aliased <code>naudit.expired_comment_warn_task</code> table
     * reference
     */
    public ExpiredCommentWarnTask(Name alias) {
        this(alias, EXPIRED_COMMENT_WARN_TASK);
    }

    /**
     * Create a <code>naudit.expired_comment_warn_task</code> table reference
     */
    public ExpiredCommentWarnTask() {
        this(DSL.name("expired_comment_warn_task"), null);
    }

    public <O extends Record> ExpiredCommentWarnTask(Table<O> child, ForeignKey<O, ExpiredCommentWarnTaskRecord> key) {
        super(child, key, EXPIRED_COMMENT_WARN_TASK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<ExpiredCommentWarnTaskRecord, Long> getIdentity() {
        return (Identity<ExpiredCommentWarnTaskRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExpiredCommentWarnTaskRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_BE;
    }

    @Override
    public ExpiredCommentWarnTask as(String alias) {
        return new ExpiredCommentWarnTask(DSL.name(alias), this);
    }

    @Override
    public ExpiredCommentWarnTask as(Name alias) {
        return new ExpiredCommentWarnTask(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExpiredCommentWarnTask rename(String name) {
        return new ExpiredCommentWarnTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExpiredCommentWarnTask rename(Name name) {
        return new ExpiredCommentWarnTask(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Integer, Long, Integer, String, String, LocalDateTime, Long, LocalDateTime, Integer, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
