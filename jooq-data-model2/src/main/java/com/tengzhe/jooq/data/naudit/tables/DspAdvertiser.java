/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.DspAdvertiserRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DspAdvertiser extends TableImpl<DspAdvertiserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.dsp_advertiser</code>
     */
    public static final DspAdvertiser DSP_ADVERTISER = new DspAdvertiser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DspAdvertiserRecord> getRecordType() {
        return DspAdvertiserRecord.class;
    }

    /**
     * The column <code>naudit.dsp_advertiser.id</code>.
     */
    public final TableField<DspAdvertiserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.name</code>.
     */
    public final TableField<DspAdvertiserRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.user_id</code>.
     */
    public final TableField<DspAdvertiserRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.user_name</code>.
     */
    public final TableField<DspAdvertiserRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.risk_sample_rate</code>.
     */
    public final TableField<DspAdvertiserRecord, Double> RISK_SAMPLE_RATE = createField(DSL.name("risk_sample_rate"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.risk_sample_max</code>.
     */
    public final TableField<DspAdvertiserRecord, Integer> RISK_SAMPLE_MAX = createField(DSL.name("risk_sample_max"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.non_risk_sample_rate</code>.
     */
    public final TableField<DspAdvertiserRecord, Double> NON_RISK_SAMPLE_RATE = createField(DSL.name("non_risk_sample_rate"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.non_risk_sample_max</code>.
     */
    public final TableField<DspAdvertiserRecord, Integer> NON_RISK_SAMPLE_MAX = createField(DSL.name("non_risk_sample_max"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.sale</code>.
     */
    public final TableField<DspAdvertiserRecord, String> SALE = createField(DSL.name("sale"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.sale_email</code>.
     */
    public final TableField<DspAdvertiserRecord, String> SALE_EMAIL = createField(DSL.name("sale_email"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.operator_id</code>.
     */
    public final TableField<DspAdvertiserRecord, Long> OPERATOR_ID = createField(DSL.name("operator_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.create_time</code>.
     */
    public final TableField<DspAdvertiserRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>naudit.dsp_advertiser.modify_time</code>.
     */
    public final TableField<DspAdvertiserRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private DspAdvertiser(Name alias, Table<DspAdvertiserRecord> aliased) {
        this(alias, aliased, null);
    }

    private DspAdvertiser(Name alias, Table<DspAdvertiserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.dsp_advertiser</code> table reference
     */
    public DspAdvertiser(String alias) {
        this(DSL.name(alias), DSP_ADVERTISER);
    }

    /**
     * Create an aliased <code>naudit.dsp_advertiser</code> table reference
     */
    public DspAdvertiser(Name alias) {
        this(alias, DSP_ADVERTISER);
    }

    /**
     * Create a <code>naudit.dsp_advertiser</code> table reference
     */
    public DspAdvertiser() {
        this(DSL.name("dsp_advertiser"), null);
    }

    public <O extends Record> DspAdvertiser(Table<O> child, ForeignKey<O, DspAdvertiserRecord> key) {
        super(child, key, DSP_ADVERTISER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<DspAdvertiserRecord, Long> getIdentity() {
        return (Identity<DspAdvertiserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DspAdvertiserRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_26;
    }

    @Override
    public DspAdvertiser as(String alias) {
        return new DspAdvertiser(DSL.name(alias), this);
    }

    @Override
    public DspAdvertiser as(Name alias) {
        return new DspAdvertiser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DspAdvertiser rename(String name) {
        return new DspAdvertiser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DspAdvertiser rename(Name name) {
        return new DspAdvertiser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, Long, String, Double, Integer, Double, Integer, String, String, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
