/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.AuditUserWhiteDomainRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditUserWhiteDomain extends TableImpl<AuditUserWhiteDomainRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.audit_user_white_domain</code>
     */
    public static final AuditUserWhiteDomain AUDIT_USER_WHITE_DOMAIN = new AuditUserWhiteDomain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditUserWhiteDomainRecord> getRecordType() {
        return AuditUserWhiteDomainRecord.class;
    }

    /**
     * The column <code>naudit.audit_user_white_domain.id</code>.
     */
    public final TableField<AuditUserWhiteDomainRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.audit_user_white_domain.type</code>.
     */
    public final TableField<AuditUserWhiteDomainRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_user_white_domain.user_id</code>.
     */
    public final TableField<AuditUserWhiteDomainRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("-1", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>naudit.audit_user_white_domain.domain</code>.
     */
    public final TableField<AuditUserWhiteDomainRecord, String> DOMAIN = createField(DSL.name("domain"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>naudit.audit_user_white_domain.url</code>.
     */
    public final TableField<AuditUserWhiteDomainRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(4096).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.audit_user_white_domain.url_md5</code>.
     */
    public final TableField<AuditUserWhiteDomainRecord, String> URL_MD5 = createField(DSL.name("url_md5"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.audit_user_white_domain.state</code>.
     */
    public final TableField<AuditUserWhiteDomainRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.audit_user_white_domain.operator_id</code>.
     */
    public final TableField<AuditUserWhiteDomainRecord, Long> OPERATOR_ID = createField(DSL.name("operator_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_user_white_domain.create_time</code>.
     */
    public final TableField<AuditUserWhiteDomainRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'2000-01-01 00:00:00'", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>naudit.audit_user_white_domain.modify_time</code>.
     */
    public final TableField<AuditUserWhiteDomainRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditUserWhiteDomain(Name alias, Table<AuditUserWhiteDomainRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditUserWhiteDomain(Name alias, Table<AuditUserWhiteDomainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.audit_user_white_domain</code> table
     * reference
     */
    public AuditUserWhiteDomain(String alias) {
        this(DSL.name(alias), AUDIT_USER_WHITE_DOMAIN);
    }

    /**
     * Create an aliased <code>naudit.audit_user_white_domain</code> table
     * reference
     */
    public AuditUserWhiteDomain(Name alias) {
        this(alias, AUDIT_USER_WHITE_DOMAIN);
    }

    /**
     * Create a <code>naudit.audit_user_white_domain</code> table reference
     */
    public AuditUserWhiteDomain() {
        this(DSL.name("audit_user_white_domain"), null);
    }

    public <O extends Record> AuditUserWhiteDomain(Table<O> child, ForeignKey<O, AuditUserWhiteDomainRecord> key) {
        super(child, key, AUDIT_USER_WHITE_DOMAIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<AuditUserWhiteDomainRecord, Integer> getIdentity() {
        return (Identity<AuditUserWhiteDomainRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditUserWhiteDomainRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public AuditUserWhiteDomain as(String alias) {
        return new AuditUserWhiteDomain(DSL.name(alias), this);
    }

    @Override
    public AuditUserWhiteDomain as(Name alias) {
        return new AuditUserWhiteDomain(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditUserWhiteDomain rename(String name) {
        return new AuditUserWhiteDomain(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditUserWhiteDomain rename(Name name) {
        return new AuditUserWhiteDomain(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, Long, String, String, String, Integer, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
