/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.UcRelationRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UcRelation extends TableImpl<UcRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.uc_relation</code>
     */
    public static final UcRelation UC_RELATION = new UcRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UcRelationRecord> getRecordType() {
        return UcRelationRecord.class;
    }

    /**
     * The column <code>naudit.uc_relation.id</code>.
     */
    public final TableField<UcRelationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.uc_relation.uc_id</code>.
     */
    public final TableField<UcRelationRecord, Long> UC_ID = createField(DSL.name("uc_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("-1", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>naudit.uc_relation.user_name</code>.
     */
    public final TableField<UcRelationRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.uc_relation.type</code>.
     */
    public final TableField<UcRelationRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("-1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.uc_relation.target_id</code>.
     */
    public final TableField<UcRelationRecord, Long> TARGET_ID = createField(DSL.name("target_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("-1", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>naudit.uc_relation.target_name</code>.
     */
    public final TableField<UcRelationRecord, String> TARGET_NAME = createField(DSL.name("target_name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.uc_relation.create_time</code>.
     */
    public final TableField<UcRelationRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>naudit.uc_relation.modify_time</code>.
     */
    public final TableField<UcRelationRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private UcRelation(Name alias, Table<UcRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private UcRelation(Name alias, Table<UcRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.uc_relation</code> table reference
     */
    public UcRelation(String alias) {
        this(DSL.name(alias), UC_RELATION);
    }

    /**
     * Create an aliased <code>naudit.uc_relation</code> table reference
     */
    public UcRelation(Name alias) {
        this(alias, UC_RELATION);
    }

    /**
     * Create a <code>naudit.uc_relation</code> table reference
     */
    public UcRelation() {
        this(DSL.name("uc_relation"), null);
    }

    public <O extends Record> UcRelation(Table<O> child, ForeignKey<O, UcRelationRecord> key) {
        super(child, key, UC_RELATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<UcRelationRecord, Long> getIdentity() {
        return (Identity<UcRelationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UcRelationRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    @Override
    public UcRelation as(String alias) {
        return new UcRelation(DSL.name(alias), this);
    }

    @Override
    public UcRelation as(Name alias) {
        return new UcRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UcRelation rename(String name) {
        return new UcRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UcRelation rename(Name name) {
        return new UcRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, Integer, Long, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
