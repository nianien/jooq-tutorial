/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.material.tables;


import com.tengzhe.jooq.data.material.Keys;
import com.tengzhe.jooq.data.material.Material;
import com.tengzhe.jooq.data.material.tables.records.AuditRuleRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditRule extends TableImpl<AuditRuleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>material.audit_rule</code>
     */
    public static final AuditRule AUDIT_RULE = new AuditRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditRuleRecord> getRecordType() {
        return AuditRuleRecord.class;
    }

    /**
     * The column <code>material.audit_rule.id</code>.
     */
    public final TableField<AuditRuleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>material.audit_rule.entity_type</code>.
     */
    public final TableField<AuditRuleRecord, Integer> ENTITY_TYPE = createField(DSL.name("entity_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.audit_rule.audit_type</code>.
     */
    public final TableField<AuditRuleRecord, Integer> AUDIT_TYPE = createField(DSL.name("audit_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.audit_rule.title</code>.
     */
    public final TableField<AuditRuleRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>material.audit_rule.description</code>.
     */
    public final TableField<AuditRuleRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>material.audit_rule.state</code>.
     */
    public final TableField<AuditRuleRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.audit_rule.expression</code>.
     */
    public final TableField<AuditRuleRecord, String> EXPRESSION = createField(DSL.name("expression"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>material.audit_rule.priority</code>.
     */
    public final TableField<AuditRuleRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.audit_rule.create_time</code>.
     */
    public final TableField<AuditRuleRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>material.audit_rule.modify_time</code>.
     */
    public final TableField<AuditRuleRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditRule(Name alias, Table<AuditRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditRule(Name alias, Table<AuditRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>material.audit_rule</code> table reference
     */
    public AuditRule(String alias) {
        this(DSL.name(alias), AUDIT_RULE);
    }

    /**
     * Create an aliased <code>material.audit_rule</code> table reference
     */
    public AuditRule(Name alias) {
        this(alias, AUDIT_RULE);
    }

    /**
     * Create a <code>material.audit_rule</code> table reference
     */
    public AuditRule() {
        this(DSL.name("audit_rule"), null);
    }

    public <O extends Record> AuditRule(Table<O> child, ForeignKey<O, AuditRuleRecord> key) {
        super(child, key, AUDIT_RULE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Material.MATERIAL;
    }

    @Override
    public Identity<AuditRuleRecord, Long> getIdentity() {
        return (Identity<AuditRuleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditRuleRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_64E;
    }

    @Override
    public AuditRule as(String alias) {
        return new AuditRule(DSL.name(alias), this);
    }

    @Override
    public AuditRule as(Name alias) {
        return new AuditRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditRule rename(String name) {
        return new AuditRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditRule rename(Name name) {
        return new AuditRule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Integer, Integer, String, String, Integer, String, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
