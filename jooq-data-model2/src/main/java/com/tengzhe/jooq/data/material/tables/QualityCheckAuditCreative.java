/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.material.tables;


import com.tengzhe.jooq.data.material.Keys;
import com.tengzhe.jooq.data.material.Material;
import com.tengzhe.jooq.data.material.tables.records.QualityCheckAuditCreativeRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QualityCheckAuditCreative extends TableImpl<QualityCheckAuditCreativeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>material.quality_check_audit_creative</code>
     */
    public static final QualityCheckAuditCreative QUALITY_CHECK_AUDIT_CREATIVE = new QualityCheckAuditCreative();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QualityCheckAuditCreativeRecord> getRecordType() {
        return QualityCheckAuditCreativeRecord.class;
    }

    /**
     * The column <code>material.quality_check_audit_creative.id</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.quality_check_id</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, Long> QUALITY_CHECK_ID = createField(DSL.name("quality_check_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.audit_creative_id</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, Long> AUDIT_CREATIVE_ID = createField(DSL.name("audit_creative_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.creative_id</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, Long> CREATIVE_ID = createField(DSL.name("creative_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.campaign_id</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, Long> CAMPAIGN_ID = createField(DSL.name("campaign_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.quality_check_audit_creative.audit_type</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, Integer> AUDIT_TYPE = createField(DSL.name("audit_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.audit_state</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, Integer> AUDIT_STATE = createField(DSL.name("audit_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.quality_check_audit_creative.auditor_id</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, String> AUDITOR_ID = createField(DSL.name("auditor_id"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.auditor_name</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, String> AUDITOR_NAME = createField(DSL.name("auditor_name"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.audit_reason</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, String> AUDIT_REASON = createField(DSL.name("audit_reason"), SQLDataType.VARCHAR(4096).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.audit_end_time</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, LocalDateTime> AUDIT_END_TIME = createField(DSL.name("audit_end_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'2000-01-01 00:00:00'", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.check_state</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, Integer> CHECK_STATE = createField(DSL.name("check_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.quality_check_audit_creative.checker_id</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, Long> CHECKER_ID = createField(DSL.name("checker_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("-1", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.checker_name</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, String> CHECKER_NAME = createField(DSL.name("checker_name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.check_result</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, Integer> CHECK_RESULT = createField(DSL.name("check_result"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>material.quality_check_audit_creative.reason_code</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, String> REASON_CODE = createField(DSL.name("reason_code"), SQLDataType.VARCHAR(4096).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>material.quality_check_audit_creative.reason</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(4096).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>material.quality_check_audit_creative.check_time</code>.
     */
    public final TableField<QualityCheckAuditCreativeRecord, LocalDateTime> CHECK_TIME = createField(DSL.name("check_time"), SQLDataType.LOCALDATETIME(6), this, "");

    private QualityCheckAuditCreative(Name alias, Table<QualityCheckAuditCreativeRecord> aliased) {
        this(alias, aliased, null);
    }

    private QualityCheckAuditCreative(Name alias, Table<QualityCheckAuditCreativeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>material.quality_check_audit_creative</code>
     * table reference
     */
    public QualityCheckAuditCreative(String alias) {
        this(DSL.name(alias), QUALITY_CHECK_AUDIT_CREATIVE);
    }

    /**
     * Create an aliased <code>material.quality_check_audit_creative</code>
     * table reference
     */
    public QualityCheckAuditCreative(Name alias) {
        this(alias, QUALITY_CHECK_AUDIT_CREATIVE);
    }

    /**
     * Create a <code>material.quality_check_audit_creative</code> table
     * reference
     */
    public QualityCheckAuditCreative() {
        this(DSL.name("quality_check_audit_creative"), null);
    }

    public <O extends Record> QualityCheckAuditCreative(Table<O> child, ForeignKey<O, QualityCheckAuditCreativeRecord> key) {
        super(child, key, QUALITY_CHECK_AUDIT_CREATIVE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Material.MATERIAL;
    }

    @Override
    public Identity<QualityCheckAuditCreativeRecord, Long> getIdentity() {
        return (Identity<QualityCheckAuditCreativeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QualityCheckAuditCreativeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_80;
    }

    @Override
    public QualityCheckAuditCreative as(String alias) {
        return new QualityCheckAuditCreative(DSL.name(alias), this);
    }

    @Override
    public QualityCheckAuditCreative as(Name alias) {
        return new QualityCheckAuditCreative(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QualityCheckAuditCreative rename(String name) {
        return new QualityCheckAuditCreative(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QualityCheckAuditCreative rename(Name name) {
        return new QualityCheckAuditCreative(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Long, Long, Long, Long, Long, Integer, Integer, String, String, String, LocalDateTime, Integer, Long, String, Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
