/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.audit_wolong.tables;


import com.tengzhe.jooq.data.audit_wolong.AuditWolong;
import com.tengzhe.jooq.data.audit_wolong.Keys;
import com.tengzhe.jooq.data.audit_wolong.tables.records.AuditCompeteWordRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditCompeteWord extends TableImpl<AuditCompeteWordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_wolong.audit_compete_word</code>
     */
    public static final AuditCompeteWord AUDIT_COMPETE_WORD = new AuditCompeteWord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditCompeteWordRecord> getRecordType() {
        return AuditCompeteWordRecord.class;
    }

    /**
     * The column <code>audit_wolong.audit_compete_word.id</code>.
     */
    public final TableField<AuditCompeteWordRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.operatorid</code>.
     */
    public final TableField<AuditCompeteWordRecord, Long> OPERATORID = createField(DSL.name("operatorid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.keyword</code>.
     */
    public final TableField<AuditCompeteWordRecord, String> KEYWORD = createField(DSL.name("keyword"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_compete_word.creative_confine_type</code>.
     */
    public final TableField<AuditCompeteWordRecord, Integer> CREATIVE_CONFINE_TYPE = createField(DSL.name("creative_confine_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.remark</code>.
     */
    public final TableField<AuditCompeteWordRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.create_time</code>.
     */
    public final TableField<AuditCompeteWordRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'1970-01-01 00:00:00'", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.modify_time</code>.
     */
    public final TableField<AuditCompeteWordRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.indus_ids</code>.
     */
    public final TableField<AuditCompeteWordRecord, String> INDUS_IDS = createField(DSL.name("indus_ids"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("'0'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.status</code>.
     */
    public final TableField<AuditCompeteWordRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'5'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.ref_id</code>.
     */
    public final TableField<AuditCompeteWordRecord, Long> REF_ID = createField(DSL.name("ref_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.city_hash</code>.
     */
    public final TableField<AuditCompeteWordRecord, Long> CITY_HASH = createField(DSL.name("city_hash"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.effective_time</code>.
     */
    public final TableField<AuditCompeteWordRecord, LocalDateTime> EFFECTIVE_TIME = createField(DSL.name("effective_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.audit_compete_word.ineffective_time</code>.
     */
    public final TableField<AuditCompeteWordRecord, LocalDateTime> INEFFECTIVE_TIME = createField(DSL.name("ineffective_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    private AuditCompeteWord(Name alias, Table<AuditCompeteWordRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditCompeteWord(Name alias, Table<AuditCompeteWordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_wolong.audit_compete_word</code> table
     * reference
     */
    public AuditCompeteWord(String alias) {
        this(DSL.name(alias), AUDIT_COMPETE_WORD);
    }

    /**
     * Create an aliased <code>audit_wolong.audit_compete_word</code> table
     * reference
     */
    public AuditCompeteWord(Name alias) {
        this(alias, AUDIT_COMPETE_WORD);
    }

    /**
     * Create a <code>audit_wolong.audit_compete_word</code> table reference
     */
    public AuditCompeteWord() {
        this(DSL.name("audit_compete_word"), null);
    }

    public <O extends Record> AuditCompeteWord(Table<O> child, ForeignKey<O, AuditCompeteWordRecord> key) {
        super(child, key, AUDIT_COMPETE_WORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditWolong.AUDIT_WOLONG;
    }

    @Override
    public Identity<AuditCompeteWordRecord, Long> getIdentity() {
        return (Identity<AuditCompeteWordRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditCompeteWordRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3C;
    }

    @Override
    public AuditCompeteWord as(String alias) {
        return new AuditCompeteWord(DSL.name(alias), this);
    }

    @Override
    public AuditCompeteWord as(Name alias) {
        return new AuditCompeteWord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditCompeteWord rename(String name) {
        return new AuditCompeteWord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditCompeteWord rename(Name name) {
        return new AuditCompeteWord(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, String, Integer, String, LocalDateTime, LocalDateTime, String, Integer, Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
