/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.audit_wolong.tables;


import com.tengzhe.jooq.data.audit_wolong.AuditWolong;
import com.tengzhe.jooq.data.audit_wolong.Keys;
import com.tengzhe.jooq.data.audit_wolong.tables.records.AuditUserLandingPageRiskRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditUserLandingPageRisk extends TableImpl<AuditUserLandingPageRiskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>audit_wolong.audit_user_landing_page_risk</code>
     */
    public static final AuditUserLandingPageRisk AUDIT_USER_LANDING_PAGE_RISK = new AuditUserLandingPageRisk();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditUserLandingPageRiskRecord> getRecordType() {
        return AuditUserLandingPageRiskRecord.class;
    }

    /**
     * The column <code>audit_wolong.audit_user_landing_page_risk.id</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_wolong.audit_user_landing_page_risk.userid</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, Long> USERID = createField(DSL.name("userid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>audit_wolong.audit_user_landing_page_risk.url</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(1024).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.hit_words</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, String> HIT_WORDS = createField(DSL.name("hit_words"), SQLDataType.VARCHAR(2048).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.audit_user_landing_page_risk.type</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.risk_rate</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, String> RISK_RATE = createField(DSL.name("risk_rate"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.operate</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, Integer> OPERATE = createField(DSL.name("operate"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.audit_user_landing_page_risk.tag</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, Integer> TAG = createField(DSL.name("tag"), SQLDataType.INTEGER.defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.audit_user_landing_page_risk.pic</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, String> PIC = createField(DSL.name("pic"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.audit_user_landing_page_risk.reason</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.crawl_time</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, LocalDateTime> CRAWL_TIME = createField(DSL.name("crawl_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.audit_time</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, LocalDateTime> AUDIT_TIME = createField(DSL.name("audit_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.create_time</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.audit_user_landing_page_risk.source</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, Integer> SOURCE = createField(DSL.name("source"), SQLDataType.INTEGER.defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.url_risk_type</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, Integer> URL_RISK_TYPE = createField(DSL.name("url_risk_type"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.feiqi_risk_type</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, Integer> FEIQI_RISK_TYPE = createField(DSL.name("feiqi_risk_type"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.auditorid</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, Long> AUDITORID = createField(DSL.name("auditorid"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.request_id</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, String> REQUEST_ID = createField(DSL.name("request_id"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_user_landing_page_risk.material_risk_id</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, Long> MATERIAL_RISK_ID = createField(DSL.name("material_risk_id"), SQLDataType.BIGINT.defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.audit_user_landing_page_risk.ext</code>.
     */
    public final TableField<AuditUserLandingPageRiskRecord, String> EXT = createField(DSL.name("ext"), SQLDataType.VARCHAR(2048).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private AuditUserLandingPageRisk(Name alias, Table<AuditUserLandingPageRiskRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditUserLandingPageRisk(Name alias, Table<AuditUserLandingPageRiskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_wolong.audit_user_landing_page_risk</code>
     * table reference
     */
    public AuditUserLandingPageRisk(String alias) {
        this(DSL.name(alias), AUDIT_USER_LANDING_PAGE_RISK);
    }

    /**
     * Create an aliased <code>audit_wolong.audit_user_landing_page_risk</code>
     * table reference
     */
    public AuditUserLandingPageRisk(Name alias) {
        this(alias, AUDIT_USER_LANDING_PAGE_RISK);
    }

    /**
     * Create a <code>audit_wolong.audit_user_landing_page_risk</code> table
     * reference
     */
    public AuditUserLandingPageRisk() {
        this(DSL.name("audit_user_landing_page_risk"), null);
    }

    public <O extends Record> AuditUserLandingPageRisk(Table<O> child, ForeignKey<O, AuditUserLandingPageRiskRecord> key) {
        super(child, key, AUDIT_USER_LANDING_PAGE_RISK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditWolong.AUDIT_WOLONG;
    }

    @Override
    public Identity<AuditUserLandingPageRiskRecord, Long> getIdentity() {
        return (Identity<AuditUserLandingPageRiskRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditUserLandingPageRiskRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    @Override
    public AuditUserLandingPageRisk as(String alias) {
        return new AuditUserLandingPageRisk(DSL.name(alias), this);
    }

    @Override
    public AuditUserLandingPageRisk as(Name alias) {
        return new AuditUserLandingPageRisk(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditUserLandingPageRisk rename(String name) {
        return new AuditUserLandingPageRisk(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditUserLandingPageRisk rename(Name name) {
        return new AuditUserLandingPageRisk(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, Long, String, String, Integer, String, Integer, Integer, String, String, LocalDateTime, LocalDateTime, LocalDateTime, Integer, Integer, Integer, Long, String, Long, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
