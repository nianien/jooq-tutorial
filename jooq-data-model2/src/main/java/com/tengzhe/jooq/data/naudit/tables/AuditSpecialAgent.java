/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.AuditSpecialAgentRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditSpecialAgent extends TableImpl<AuditSpecialAgentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.audit_special_agent</code>
     */
    public static final AuditSpecialAgent AUDIT_SPECIAL_AGENT = new AuditSpecialAgent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditSpecialAgentRecord> getRecordType() {
        return AuditSpecialAgentRecord.class;
    }

    /**
     * The column <code>naudit.audit_special_agent.id</code>.
     */
    public final TableField<AuditSpecialAgentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.audit_special_agent.user_id</code>.
     */
    public final TableField<AuditSpecialAgentRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_special_agent.agent_cs_name</code>.
     */
    public final TableField<AuditSpecialAgentRecord, String> AGENT_CS_NAME = createField(DSL.name("agent_cs_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>naudit.audit_special_agent.state</code>.
     */
    public final TableField<AuditSpecialAgentRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.audit_special_agent.operator_id</code>.
     */
    public final TableField<AuditSpecialAgentRecord, Long> OPERATOR_ID = createField(DSL.name("operator_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_special_agent.create_time</code>.
     */
    public final TableField<AuditSpecialAgentRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>naudit.audit_special_agent.modify_time</code>.
     */
    public final TableField<AuditSpecialAgentRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditSpecialAgent(Name alias, Table<AuditSpecialAgentRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditSpecialAgent(Name alias, Table<AuditSpecialAgentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.audit_special_agent</code> table reference
     */
    public AuditSpecialAgent(String alias) {
        this(DSL.name(alias), AUDIT_SPECIAL_AGENT);
    }

    /**
     * Create an aliased <code>naudit.audit_special_agent</code> table reference
     */
    public AuditSpecialAgent(Name alias) {
        this(alias, AUDIT_SPECIAL_AGENT);
    }

    /**
     * Create a <code>naudit.audit_special_agent</code> table reference
     */
    public AuditSpecialAgent() {
        this(DSL.name("audit_special_agent"), null);
    }

    public <O extends Record> AuditSpecialAgent(Table<O> child, ForeignKey<O, AuditSpecialAgentRecord> key) {
        super(child, key, AUDIT_SPECIAL_AGENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<AuditSpecialAgentRecord, Long> getIdentity() {
        return (Identity<AuditSpecialAgentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditSpecialAgentRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_32;
    }

    @Override
    public AuditSpecialAgent as(String alias) {
        return new AuditSpecialAgent(DSL.name(alias), this);
    }

    @Override
    public AuditSpecialAgent as(Name alias) {
        return new AuditSpecialAgent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditSpecialAgent rename(String name) {
        return new AuditSpecialAgent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditSpecialAgent rename(Name name) {
        return new AuditSpecialAgent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, Integer, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
