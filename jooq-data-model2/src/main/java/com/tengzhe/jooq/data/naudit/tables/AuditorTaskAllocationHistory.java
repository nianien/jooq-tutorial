/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.AuditorTaskAllocationHistoryRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditorTaskAllocationHistory extends TableImpl<AuditorTaskAllocationHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>naudit.auditor_task_allocation_history</code>
     */
    public static final AuditorTaskAllocationHistory AUDITOR_TASK_ALLOCATION_HISTORY = new AuditorTaskAllocationHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditorTaskAllocationHistoryRecord> getRecordType() {
        return AuditorTaskAllocationHistoryRecord.class;
    }

    /**
     * The column <code>naudit.auditor_task_allocation_history.id</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.auditor_task_allocation_history.task_id</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, Long> TASK_ID = createField(DSL.name("task_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.auditor_task_allocation_history.type</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.auditor_task_allocation_history.biz_type</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, Integer> BIZ_TYPE = createField(DSL.name("biz_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.auditor_task_allocation_history.source</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, Integer> SOURCE = createField(DSL.name("source"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("-1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.auditor_task_allocation_history.status</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>naudit.auditor_task_allocation_history.auditor_id</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, String> AUDITOR_ID = createField(DSL.name("auditor_id"), SQLDataType.VARCHAR(4096).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>naudit.auditor_task_allocation_history.begin_date</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, LocalDate> BEGIN_DATE = createField(DSL.name("begin_date"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>naudit.auditor_task_allocation_history.end_date</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column
     * <code>naudit.auditor_task_allocation_history.logic_state</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, Integer> LOGIC_STATE = createField(DSL.name("logic_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>naudit.auditor_task_allocation_history.create_time</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column
     * <code>naudit.auditor_task_allocation_history.modify_time</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>naudit.auditor_task_allocation_history.add_time</code>.
     */
    public final TableField<AuditorTaskAllocationHistoryRecord, LocalDateTime> ADD_TIME = createField(DSL.name("add_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditorTaskAllocationHistory(Name alias, Table<AuditorTaskAllocationHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditorTaskAllocationHistory(Name alias, Table<AuditorTaskAllocationHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.auditor_task_allocation_history</code>
     * table reference
     */
    public AuditorTaskAllocationHistory(String alias) {
        this(DSL.name(alias), AUDITOR_TASK_ALLOCATION_HISTORY);
    }

    /**
     * Create an aliased <code>naudit.auditor_task_allocation_history</code>
     * table reference
     */
    public AuditorTaskAllocationHistory(Name alias) {
        this(alias, AUDITOR_TASK_ALLOCATION_HISTORY);
    }

    /**
     * Create a <code>naudit.auditor_task_allocation_history</code> table
     * reference
     */
    public AuditorTaskAllocationHistory() {
        this(DSL.name("auditor_task_allocation_history"), null);
    }

    public <O extends Record> AuditorTaskAllocationHistory(Table<O> child, ForeignKey<O, AuditorTaskAllocationHistoryRecord> key) {
        super(child, key, AUDITOR_TASK_ALLOCATION_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<AuditorTaskAllocationHistoryRecord, Long> getIdentity() {
        return (Identity<AuditorTaskAllocationHistoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditorTaskAllocationHistoryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_FD;
    }

    @Override
    public AuditorTaskAllocationHistory as(String alias) {
        return new AuditorTaskAllocationHistory(DSL.name(alias), this);
    }

    @Override
    public AuditorTaskAllocationHistory as(Name alias) {
        return new AuditorTaskAllocationHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditorTaskAllocationHistory rename(String name) {
        return new AuditorTaskAllocationHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditorTaskAllocationHistory rename(Name name) {
        return new AuditorTaskAllocationHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, Integer, Integer, Integer, Integer, String, LocalDate, LocalDate, Integer, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
