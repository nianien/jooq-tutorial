/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.QualificationConfigRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QualificationConfig extends TableImpl<QualificationConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.qualification_config</code>
     */
    public static final QualificationConfig QUALIFICATION_CONFIG = new QualificationConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QualificationConfigRecord> getRecordType() {
        return QualificationConfigRecord.class;
    }

    /**
     * The column <code>naudit.qualification_config.id</code>.
     */
    public final TableField<QualificationConfigRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.qualification_config.code</code>.
     */
    public final TableField<QualificationConfigRecord, Long> CODE = createField(DSL.name("code"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("-1", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>naudit.qualification_config.name</code>.
     */
    public final TableField<QualificationConfigRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>naudit.qualification_config.level</code>.
     */
    public final TableField<QualificationConfigRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.qualification_config.parent_id</code>.
     */
    public final TableField<QualificationConfigRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("-1", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>naudit.qualification_config.remark</code>.
     */
    public final TableField<QualificationConfigRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.qualification_config.create_time</code>.
     */
    public final TableField<QualificationConfigRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>naudit.qualification_config.modify_time</code>.
     */
    public final TableField<QualificationConfigRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>naudit.qualification_config.effective</code>.
     */
    public final TableField<QualificationConfigRecord, Integer> EFFECTIVE = createField(DSL.name("effective"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private QualificationConfig(Name alias, Table<QualificationConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private QualificationConfig(Name alias, Table<QualificationConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.qualification_config</code> table
     * reference
     */
    public QualificationConfig(String alias) {
        this(DSL.name(alias), QUALIFICATION_CONFIG);
    }

    /**
     * Create an aliased <code>naudit.qualification_config</code> table
     * reference
     */
    public QualificationConfig(Name alias) {
        this(alias, QUALIFICATION_CONFIG);
    }

    /**
     * Create a <code>naudit.qualification_config</code> table reference
     */
    public QualificationConfig() {
        this(DSL.name("qualification_config"), null);
    }

    public <O extends Record> QualificationConfig(Table<O> child, ForeignKey<O, QualificationConfigRecord> key) {
        super(child, key, QUALIFICATION_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public UniqueKey<QualificationConfigRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C;
    }

    @Override
    public QualificationConfig as(String alias) {
        return new QualificationConfig(DSL.name(alias), this);
    }

    @Override
    public QualificationConfig as(Name alias) {
        return new QualificationConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QualificationConfig rename(String name) {
        return new QualificationConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QualificationConfig rename(Name name) {
        return new QualificationConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, String, Integer, Long, String, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
