/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.audit_wolong.tables;


import com.tengzhe.jooq.data.audit_wolong.AuditWolong;
import com.tengzhe.jooq.data.audit_wolong.Keys;
import com.tengzhe.jooq.data.audit_wolong.tables.records.AuditAccountTagRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditAccountTag extends TableImpl<AuditAccountTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_wolong.audit_account_tag</code>
     */
    public static final AuditAccountTag AUDIT_ACCOUNT_TAG = new AuditAccountTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditAccountTagRecord> getRecordType() {
        return AuditAccountTagRecord.class;
    }

    /**
     * The column <code>audit_wolong.audit_account_tag.id</code>.
     */
    public final TableField<AuditAccountTagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_wolong.audit_account_tag.version</code>.
     */
    public final TableField<AuditAccountTagRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>audit_wolong.audit_account_tag.user_id</code>.
     */
    public final TableField<AuditAccountTagRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>audit_wolong.audit_account_tag.tag_type</code>.
     */
    public final TableField<AuditAccountTagRecord, Integer> TAG_TYPE = createField(DSL.name("tag_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>audit_wolong.audit_account_tag.tag_content</code>.
     */
    public final TableField<AuditAccountTagRecord, String> TAG_CONTENT = createField(DSL.name("tag_content"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>audit_wolong.audit_account_tag.create_time</code>.
     */
    public final TableField<AuditAccountTagRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.audit_account_tag.modify_time</code>.
     */
    public final TableField<AuditAccountTagRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditAccountTag(Name alias, Table<AuditAccountTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditAccountTag(Name alias, Table<AuditAccountTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_wolong.audit_account_tag</code> table
     * reference
     */
    public AuditAccountTag(String alias) {
        this(DSL.name(alias), AUDIT_ACCOUNT_TAG);
    }

    /**
     * Create an aliased <code>audit_wolong.audit_account_tag</code> table
     * reference
     */
    public AuditAccountTag(Name alias) {
        this(alias, AUDIT_ACCOUNT_TAG);
    }

    /**
     * Create a <code>audit_wolong.audit_account_tag</code> table reference
     */
    public AuditAccountTag() {
        this(DSL.name("audit_account_tag"), null);
    }

    public <O extends Record> AuditAccountTag(Table<O> child, ForeignKey<O, AuditAccountTagRecord> key) {
        super(child, key, AUDIT_ACCOUNT_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditWolong.AUDIT_WOLONG;
    }

    @Override
    public Identity<AuditAccountTagRecord, Long> getIdentity() {
        return (Identity<AuditAccountTagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditAccountTagRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    public AuditAccountTag as(String alias) {
        return new AuditAccountTag(DSL.name(alias), this);
    }

    @Override
    public AuditAccountTag as(Name alias) {
        return new AuditAccountTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditAccountTag rename(String name) {
        return new AuditAccountTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditAccountTag rename(Name name) {
        return new AuditAccountTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
