/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.audit_wolong.tables;


import com.tengzhe.jooq.data.audit_wolong.AuditWolong;
import com.tengzhe.jooq.data.audit_wolong.Keys;
import com.tengzhe.jooq.data.audit_wolong.tables.records.AuditUnitMaterialRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditUnitMaterial extends TableImpl<AuditUnitMaterialRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_wolong.audit_unit_material</code>
     */
    public static final AuditUnitMaterial AUDIT_UNIT_MATERIAL = new AuditUnitMaterial();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditUnitMaterialRecord> getRecordType() {
        return AuditUnitMaterialRecord.class;
    }

    /**
     * The column <code>audit_wolong.audit_unit_material.id</code>.
     */
    public final TableField<AuditUnitMaterialRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_wolong.audit_unit_material.user_id</code>.
     */
    public final TableField<AuditUnitMaterialRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.audit_unit_material.unit_id</code>.
     */
    public final TableField<AuditUnitMaterialRecord, Long> UNIT_ID = createField(DSL.name("unit_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.audit_unit_material.auditor_id</code>.
     */
    public final TableField<AuditUnitMaterialRecord, Long> AUDITOR_ID = createField(DSL.name("auditor_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("-1", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.audit_unit_material.unit_time</code>.
     */
    public final TableField<AuditUnitMaterialRecord, LocalDateTime> UNIT_TIME = createField(DSL.name("unit_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.audit_unit_material.create_time</code>.
     */
    public final TableField<AuditUnitMaterialRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.audit_unit_material.modify_time</code>.
     */
    public final TableField<AuditUnitMaterialRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditUnitMaterial(Name alias, Table<AuditUnitMaterialRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditUnitMaterial(Name alias, Table<AuditUnitMaterialRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_wolong.audit_unit_material</code> table
     * reference
     */
    public AuditUnitMaterial(String alias) {
        this(DSL.name(alias), AUDIT_UNIT_MATERIAL);
    }

    /**
     * Create an aliased <code>audit_wolong.audit_unit_material</code> table
     * reference
     */
    public AuditUnitMaterial(Name alias) {
        this(alias, AUDIT_UNIT_MATERIAL);
    }

    /**
     * Create a <code>audit_wolong.audit_unit_material</code> table reference
     */
    public AuditUnitMaterial() {
        this(DSL.name("audit_unit_material"), null);
    }

    public <O extends Record> AuditUnitMaterial(Table<O> child, ForeignKey<O, AuditUnitMaterialRecord> key) {
        super(child, key, AUDIT_UNIT_MATERIAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditWolong.AUDIT_WOLONG;
    }

    @Override
    public Identity<AuditUnitMaterialRecord, Long> getIdentity() {
        return (Identity<AuditUnitMaterialRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditUnitMaterialRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7E;
    }

    @Override
    public AuditUnitMaterial as(String alias) {
        return new AuditUnitMaterial(DSL.name(alias), this);
    }

    @Override
    public AuditUnitMaterial as(Name alias) {
        return new AuditUnitMaterial(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditUnitMaterial rename(String name) {
        return new AuditUnitMaterial(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditUnitMaterial rename(Name name) {
        return new AuditUnitMaterial(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Long, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
