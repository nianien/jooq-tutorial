/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.audit_wolong.tables;


import com.tengzhe.jooq.data.audit_wolong.AuditWolong;
import com.tengzhe.jooq.data.audit_wolong.Keys;
import com.tengzhe.jooq.data.audit_wolong.tables.records.AccountRelationRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRelation extends TableImpl<AccountRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_wolong.account_relation</code>
     */
    public static final AccountRelation ACCOUNT_RELATION = new AccountRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRelationRecord> getRecordType() {
        return AccountRelationRecord.class;
    }

    /**
     * The column <code>audit_wolong.account_relation.id</code>.
     */
    public final TableField<AccountRelationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_wolong.account_relation.userid</code>.
     */
    public final TableField<AccountRelationRecord, Long> USERID = createField(DSL.name("userid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.account_relation.user_name</code>.
     */
    public final TableField<AccountRelationRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.account_relation.type</code>.
     */
    public final TableField<AccountRelationRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.account_relation.target_id</code>.
     */
    public final TableField<AccountRelationRecord, Long> TARGET_ID = createField(DSL.name("target_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.account_relation.target_name</code>.
     */
    public final TableField<AccountRelationRecord, String> TARGET_NAME = createField(DSL.name("target_name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.account_relation.create_time</code>.
     */
    public final TableField<AccountRelationRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.account_relation.modify_time</code>.
     */
    public final TableField<AccountRelationRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AccountRelation(Name alias, Table<AccountRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountRelation(Name alias, Table<AccountRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_wolong.account_relation</code> table
     * reference
     */
    public AccountRelation(String alias) {
        this(DSL.name(alias), ACCOUNT_RELATION);
    }

    /**
     * Create an aliased <code>audit_wolong.account_relation</code> table
     * reference
     */
    public AccountRelation(Name alias) {
        this(alias, ACCOUNT_RELATION);
    }

    /**
     * Create a <code>audit_wolong.account_relation</code> table reference
     */
    public AccountRelation() {
        this(DSL.name("account_relation"), null);
    }

    public <O extends Record> AccountRelation(Table<O> child, ForeignKey<O, AccountRelationRecord> key) {
        super(child, key, ACCOUNT_RELATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditWolong.AUDIT_WOLONG;
    }

    @Override
    public Identity<AccountRelationRecord, Long> getIdentity() {
        return (Identity<AccountRelationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccountRelationRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public AccountRelation as(String alias) {
        return new AccountRelation(DSL.name(alias), this);
    }

    @Override
    public AccountRelation as(Name alias) {
        return new AccountRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRelation rename(String name) {
        return new AccountRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRelation rename(Name name) {
        return new AccountRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, Integer, Long, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
