/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables.records;


import com.tengzhe.jooq.data.naudit.tables.AuditorTaskAllocation;

import java.time.LocalDate;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditorTaskAllocationRecord extends UpdatableRecordImpl<AuditorTaskAllocationRecord> implements Record11<Long, Integer, Integer, Integer, Integer, String, LocalDate, LocalDate, Integer, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>naudit.auditor_task_allocation.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>naudit.auditor_task_allocation.type</code>.
     */
    public void setType(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.type</code>.
     */
    public Integer getType() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>naudit.auditor_task_allocation.biz_type</code>.
     */
    public void setBizType(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.biz_type</code>.
     */
    public Integer getBizType() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>naudit.auditor_task_allocation.source</code>.
     */
    public void setSource(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.source</code>.
     */
    public Integer getSource() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>naudit.auditor_task_allocation.status</code>.
     */
    public void setStatus(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.status</code>.
     */
    public Integer getStatus() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>naudit.auditor_task_allocation.auditor_id</code>.
     */
    public void setAuditorId(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.auditor_id</code>.
     */
    public String getAuditorId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>naudit.auditor_task_allocation.begin_date</code>.
     */
    public void setBeginDate(LocalDate value) {
        set(6, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.begin_date</code>.
     */
    public LocalDate getBeginDate() {
        return (LocalDate) get(6);
    }

    /**
     * Setter for <code>naudit.auditor_task_allocation.end_date</code>.
     */
    public void setEndDate(LocalDate value) {
        set(7, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.end_date</code>.
     */
    public LocalDate getEndDate() {
        return (LocalDate) get(7);
    }

    /**
     * Setter for <code>naudit.auditor_task_allocation.logic_state</code>.
     */
    public void setLogicState(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.logic_state</code>.
     */
    public Integer getLogicState() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>naudit.auditor_task_allocation.create_time</code>.
     */
    public void setCreateTime(LocalDateTime value) {
        set(9, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.create_time</code>.
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>naudit.auditor_task_allocation.modify_time</code>.
     */
    public void setModifyTime(LocalDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>naudit.auditor_task_allocation.modify_time</code>.
     */
    public LocalDateTime getModifyTime() {
        return (LocalDateTime) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Integer, Integer, Integer, Integer, String, LocalDate, LocalDate, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<Long, Integer, Integer, Integer, Integer, String, LocalDate, LocalDate, Integer, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.ID;
    }

    @Override
    public Field<Integer> field2() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.TYPE;
    }

    @Override
    public Field<Integer> field3() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.BIZ_TYPE;
    }

    @Override
    public Field<Integer> field4() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.SOURCE;
    }

    @Override
    public Field<Integer> field5() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.STATUS;
    }

    @Override
    public Field<String> field6() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.AUDITOR_ID;
    }

    @Override
    public Field<LocalDate> field7() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.BEGIN_DATE;
    }

    @Override
    public Field<LocalDate> field8() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.END_DATE;
    }

    @Override
    public Field<Integer> field9() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.LOGIC_STATE;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.CREATE_TIME;
    }

    @Override
    public Field<LocalDateTime> field11() {
        return AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION.MODIFY_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getType();
    }

    @Override
    public Integer component3() {
        return getBizType();
    }

    @Override
    public Integer component4() {
        return getSource();
    }

    @Override
    public Integer component5() {
        return getStatus();
    }

    @Override
    public String component6() {
        return getAuditorId();
    }

    @Override
    public LocalDate component7() {
        return getBeginDate();
    }

    @Override
    public LocalDate component8() {
        return getEndDate();
    }

    @Override
    public Integer component9() {
        return getLogicState();
    }

    @Override
    public LocalDateTime component10() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime component11() {
        return getModifyTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getType();
    }

    @Override
    public Integer value3() {
        return getBizType();
    }

    @Override
    public Integer value4() {
        return getSource();
    }

    @Override
    public Integer value5() {
        return getStatus();
    }

    @Override
    public String value6() {
        return getAuditorId();
    }

    @Override
    public LocalDate value7() {
        return getBeginDate();
    }

    @Override
    public LocalDate value8() {
        return getEndDate();
    }

    @Override
    public Integer value9() {
        return getLogicState();
    }

    @Override
    public LocalDateTime value10() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime value11() {
        return getModifyTime();
    }

    @Override
    public AuditorTaskAllocationRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord value2(Integer value) {
        setType(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord value3(Integer value) {
        setBizType(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord value4(Integer value) {
        setSource(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord value5(Integer value) {
        setStatus(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord value6(String value) {
        setAuditorId(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord value7(LocalDate value) {
        setBeginDate(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord value8(LocalDate value) {
        setEndDate(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord value9(Integer value) {
        setLogicState(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord value10(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord value11(LocalDateTime value) {
        setModifyTime(value);
        return this;
    }

    @Override
    public AuditorTaskAllocationRecord values(Long value1, Integer value2, Integer value3, Integer value4, Integer value5, String value6, LocalDate value7, LocalDate value8, Integer value9, LocalDateTime value10, LocalDateTime value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuditorTaskAllocationRecord
     */
    public AuditorTaskAllocationRecord() {
        super(AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION);
    }

    /**
     * Create a detached, initialised AuditorTaskAllocationRecord
     */
    public AuditorTaskAllocationRecord(Long id, Integer type, Integer bizType, Integer source, Integer status, String auditorId, LocalDate beginDate, LocalDate endDate, Integer logicState, LocalDateTime createTime, LocalDateTime modifyTime) {
        super(AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION);

        setId(id);
        setType(type);
        setBizType(bizType);
        setSource(source);
        setStatus(status);
        setAuditorId(auditorId);
        setBeginDate(beginDate);
        setEndDate(endDate);
        setLogicState(logicState);
        setCreateTime(createTime);
        setModifyTime(modifyTime);
    }

    /**
     * Create a detached, initialised AuditorTaskAllocationRecord
     */
    public AuditorTaskAllocationRecord(com.tengzhe.jooq.data.naudit.tables.pojos.AuditorTaskAllocation value) {
        super(AuditorTaskAllocation.AUDITOR_TASK_ALLOCATION);

        if (value != null) {
            setId(value.getId());
            setType(value.getType());
            setBizType(value.getBizType());
            setSource(value.getSource());
            setStatus(value.getStatus());
            setAuditorId(value.getAuditorId());
            setBeginDate(value.getBeginDate());
            setEndDate(value.getEndDate());
            setLogicState(value.getLogicState());
            setCreateTime(value.getCreateTime());
            setModifyTime(value.getModifyTime());
        }
    }
}
