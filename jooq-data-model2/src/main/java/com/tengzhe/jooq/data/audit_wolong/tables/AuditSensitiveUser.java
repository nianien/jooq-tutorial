/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.audit_wolong.tables;


import com.tengzhe.jooq.data.audit_wolong.AuditWolong;
import com.tengzhe.jooq.data.audit_wolong.Keys;
import com.tengzhe.jooq.data.audit_wolong.tables.records.AuditSensitiveUserRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditSensitiveUser extends TableImpl<AuditSensitiveUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_wolong.audit_sensitive_user</code>
     */
    public static final AuditSensitiveUser AUDIT_SENSITIVE_USER = new AuditSensitiveUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditSensitiveUserRecord> getRecordType() {
        return AuditSensitiveUserRecord.class;
    }

    /**
     * The column <code>audit_wolong.audit_sensitive_user.id</code>.
     */
    public final TableField<AuditSensitiveUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_wolong.audit_sensitive_user.operatorid</code>.
     */
    public final TableField<AuditSensitiveUserRecord, Long> OPERATORID = createField(DSL.name("operatorid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>audit_wolong.audit_sensitive_user.sensitive_userid</code>.
     */
    public final TableField<AuditSensitiveUserRecord, Long> SENSITIVE_USERID = createField(DSL.name("sensitive_userid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.audit_sensitive_user.add_reason</code>.
     */
    public final TableField<AuditSensitiveUserRecord, String> ADD_REASON = createField(DSL.name("add_reason"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.audit_sensitive_user.remark</code>.
     */
    public final TableField<AuditSensitiveUserRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.audit_sensitive_user.create_time</code>.
     */
    public final TableField<AuditSensitiveUserRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'1970-01-01 00:00:00'", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.audit_sensitive_user.modify_time</code>.
     */
    public final TableField<AuditSensitiveUserRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditSensitiveUser(Name alias, Table<AuditSensitiveUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditSensitiveUser(Name alias, Table<AuditSensitiveUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_wolong.audit_sensitive_user</code> table
     * reference
     */
    public AuditSensitiveUser(String alias) {
        this(DSL.name(alias), AUDIT_SENSITIVE_USER);
    }

    /**
     * Create an aliased <code>audit_wolong.audit_sensitive_user</code> table
     * reference
     */
    public AuditSensitiveUser(Name alias) {
        this(alias, AUDIT_SENSITIVE_USER);
    }

    /**
     * Create a <code>audit_wolong.audit_sensitive_user</code> table reference
     */
    public AuditSensitiveUser() {
        this(DSL.name("audit_sensitive_user"), null);
    }

    public <O extends Record> AuditSensitiveUser(Table<O> child, ForeignKey<O, AuditSensitiveUserRecord> key) {
        super(child, key, AUDIT_SENSITIVE_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditWolong.AUDIT_WOLONG;
    }

    @Override
    public Identity<AuditSensitiveUserRecord, Long> getIdentity() {
        return (Identity<AuditSensitiveUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditSensitiveUserRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_22A;
    }

    @Override
    public AuditSensitiveUser as(String alias) {
        return new AuditSensitiveUser(DSL.name(alias), this);
    }

    @Override
    public AuditSensitiveUser as(Name alias) {
        return new AuditSensitiveUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditSensitiveUser rename(String name) {
        return new AuditSensitiveUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditSensitiveUser rename(Name name) {
        return new AuditSensitiveUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
