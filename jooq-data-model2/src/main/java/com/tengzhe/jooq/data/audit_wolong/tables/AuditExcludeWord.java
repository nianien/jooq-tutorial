/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.audit_wolong.tables;


import com.tengzhe.jooq.data.audit_wolong.AuditWolong;
import com.tengzhe.jooq.data.audit_wolong.Keys;
import com.tengzhe.jooq.data.audit_wolong.tables.records.AuditExcludeWordRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditExcludeWord extends TableImpl<AuditExcludeWordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_wolong.audit_exclude_word</code>
     */
    public static final AuditExcludeWord AUDIT_EXCLUDE_WORD = new AuditExcludeWord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditExcludeWordRecord> getRecordType() {
        return AuditExcludeWordRecord.class;
    }

    /**
     * The column <code>audit_wolong.audit_exclude_word.id</code>.
     */
    public final TableField<AuditExcludeWordRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_wolong.audit_exclude_word.word</code>.
     */
    public final TableField<AuditExcludeWordRecord, String> WORD = createField(DSL.name("word"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>audit_wolong.audit_exclude_word.targetid</code>.
     */
    public final TableField<AuditExcludeWordRecord, Integer> TARGETID = createField(DSL.name("targetid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>audit_wolong.audit_exclude_word.word_type</code>.
     */
    public final TableField<AuditExcludeWordRecord, Integer> WORD_TYPE = createField(DSL.name("word_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>audit_wolong.audit_exclude_word.create_time</code>.
     */
    public final TableField<AuditExcludeWordRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'2001-01-01 00:00:00'", SQLDataType.LOCALDATETIME)), this, "");

    private AuditExcludeWord(Name alias, Table<AuditExcludeWordRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditExcludeWord(Name alias, Table<AuditExcludeWordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_wolong.audit_exclude_word</code> table
     * reference
     */
    public AuditExcludeWord(String alias) {
        this(DSL.name(alias), AUDIT_EXCLUDE_WORD);
    }

    /**
     * Create an aliased <code>audit_wolong.audit_exclude_word</code> table
     * reference
     */
    public AuditExcludeWord(Name alias) {
        this(alias, AUDIT_EXCLUDE_WORD);
    }

    /**
     * Create a <code>audit_wolong.audit_exclude_word</code> table reference
     */
    public AuditExcludeWord() {
        this(DSL.name("audit_exclude_word"), null);
    }

    public <O extends Record> AuditExcludeWord(Table<O> child, ForeignKey<O, AuditExcludeWordRecord> key) {
        super(child, key, AUDIT_EXCLUDE_WORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditWolong.AUDIT_WOLONG;
    }

    @Override
    public Identity<AuditExcludeWordRecord, Integer> getIdentity() {
        return (Identity<AuditExcludeWordRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditExcludeWordRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public AuditExcludeWord as(String alias) {
        return new AuditExcludeWord(DSL.name(alias), this);
    }

    @Override
    public AuditExcludeWord as(Name alias) {
        return new AuditExcludeWord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditExcludeWord rename(String name) {
        return new AuditExcludeWord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditExcludeWord rename(Name name) {
        return new AuditExcludeWord(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
