/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.QualificationRelationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QualificationRelation extends TableImpl<QualificationRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.qualification_relation</code>
     */
    public static final QualificationRelation QUALIFICATION_RELATION = new QualificationRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QualificationRelationRecord> getRecordType() {
        return QualificationRelationRecord.class;
    }

    /**
     * The column <code>naudit.qualification_relation.id</code>.
     */
    public final TableField<QualificationRelationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.qualification_relation.source</code>.
     */
    public final TableField<QualificationRelationRecord, Integer> SOURCE = createField(DSL.name("source"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.qualification_relation.qual_id</code>.
     */
    public final TableField<QualificationRelationRecord, Long> QUAL_ID = createField(DSL.name("qual_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.qualification_relation.target_id</code>.
     */
    public final TableField<QualificationRelationRecord, Long> TARGET_ID = createField(DSL.name("target_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.qualification_relation.target_type</code>.
     */
    public final TableField<QualificationRelationRecord, Integer> TARGET_TYPE = createField(DSL.name("target_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.qualification_relation.auditor_id</code>.
     */
    public final TableField<QualificationRelationRecord, Long> AUDITOR_ID = createField(DSL.name("auditor_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("-1", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>naudit.qualification_relation.audit_state</code>.
     */
    public final TableField<QualificationRelationRecord, Integer> AUDIT_STATE = createField(DSL.name("audit_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.qualification_relation.audit_result</code>.
     */
    public final TableField<QualificationRelationRecord, String> AUDIT_RESULT = createField(DSL.name("audit_result"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.qualification_relation.audit_time</code>.
     */
    public final TableField<QualificationRelationRecord, LocalDateTime> AUDIT_TIME = createField(DSL.name("audit_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>naudit.qualification_relation.create_time</code>.
     */
    public final TableField<QualificationRelationRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private QualificationRelation(Name alias, Table<QualificationRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private QualificationRelation(Name alias, Table<QualificationRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.qualification_relation</code> table
     * reference
     */
    public QualificationRelation(String alias) {
        this(DSL.name(alias), QUALIFICATION_RELATION);
    }

    /**
     * Create an aliased <code>naudit.qualification_relation</code> table
     * reference
     */
    public QualificationRelation(Name alias) {
        this(alias, QUALIFICATION_RELATION);
    }

    /**
     * Create a <code>naudit.qualification_relation</code> table reference
     */
    public QualificationRelation() {
        this(DSL.name("qualification_relation"), null);
    }

    public <O extends Record> QualificationRelation(Table<O> child, ForeignKey<O, QualificationRelationRecord> key) {
        super(child, key, QUALIFICATION_RELATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<QualificationRelationRecord, Long> getIdentity() {
        return (Identity<QualificationRelationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QualificationRelationRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E;
    }

    @Override
    public List<UniqueKey<QualificationRelationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_EE);
    }

    @Override
    public QualificationRelation as(String alias) {
        return new QualificationRelation(DSL.name(alias), this);
    }

    @Override
    public QualificationRelation as(Name alias) {
        return new QualificationRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QualificationRelation rename(String name) {
        return new QualificationRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QualificationRelation rename(Name name) {
        return new QualificationRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Integer, Long, Long, Integer, Long, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
