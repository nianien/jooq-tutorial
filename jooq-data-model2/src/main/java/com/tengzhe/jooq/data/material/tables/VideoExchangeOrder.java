/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.material.tables;


import com.tengzhe.jooq.data.material.Keys;
import com.tengzhe.jooq.data.material.Material;
import com.tengzhe.jooq.data.material.tables.records.VideoExchangeOrderRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VideoExchangeOrder extends TableImpl<VideoExchangeOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>material.video_exchange_order</code>
     */
    public static final VideoExchangeOrder VIDEO_EXCHANGE_ORDER = new VideoExchangeOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VideoExchangeOrderRecord> getRecordType() {
        return VideoExchangeOrderRecord.class;
    }

    /**
     * The column <code>material.video_exchange_order.id</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>material.video_exchange_order.uc_id</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Long> UC_ID = createField(DSL.name("uc_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>material.video_exchange_order.user_id</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>material.video_exchange_order.advertiser</code>.
     */
    public final TableField<VideoExchangeOrderRecord, String> ADVERTISER = createField(DSL.name("advertiser"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>material.video_exchange_order.video_file</code>.
     */
    public final TableField<VideoExchangeOrderRecord, String> VIDEO_FILE = createField(DSL.name("video_file"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>material.video_exchange_order.mc_video_id</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Long> MC_VIDEO_ID = createField(DSL.name("mc_video_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>material.video_exchange_order.vex_video_id</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Long> VEX_VIDEO_ID = createField(DSL.name("vex_video_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>material.video_exchange_order.industry1</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Integer> INDUSTRY1 = createField(DSL.name("industry1"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.video_exchange_order.duration</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Integer> DURATION = createField(DSL.name("duration"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.video_exchange_order.width</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Integer> WIDTH = createField(DSL.name("width"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.video_exchange_order.height</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.video_exchange_order.version</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>material.video_exchange_order.logic_state</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Integer> LOGIC_STATE = createField(DSL.name("logic_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.video_exchange_order.state</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.video_exchange_order.state_detail</code>.
     */
    public final TableField<VideoExchangeOrderRecord, Integer> STATE_DETAIL = createField(DSL.name("state_detail"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.video_exchange_order.create_time</code>.
     */
    public final TableField<VideoExchangeOrderRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>material.video_exchange_order.modify_time</code>.
     */
    public final TableField<VideoExchangeOrderRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private VideoExchangeOrder(Name alias, Table<VideoExchangeOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private VideoExchangeOrder(Name alias, Table<VideoExchangeOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>material.video_exchange_order</code> table
     * reference
     */
    public VideoExchangeOrder(String alias) {
        this(DSL.name(alias), VIDEO_EXCHANGE_ORDER);
    }

    /**
     * Create an aliased <code>material.video_exchange_order</code> table
     * reference
     */
    public VideoExchangeOrder(Name alias) {
        this(alias, VIDEO_EXCHANGE_ORDER);
    }

    /**
     * Create a <code>material.video_exchange_order</code> table reference
     */
    public VideoExchangeOrder() {
        this(DSL.name("video_exchange_order"), null);
    }

    public <O extends Record> VideoExchangeOrder(Table<O> child, ForeignKey<O, VideoExchangeOrderRecord> key) {
        super(child, key, VIDEO_EXCHANGE_ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Material.MATERIAL;
    }

    @Override
    public UniqueKey<VideoExchangeOrderRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_DA;
    }

    @Override
    public VideoExchangeOrder as(String alias) {
        return new VideoExchangeOrder(DSL.name(alias), this);
    }

    @Override
    public VideoExchangeOrder as(Name alias) {
        return new VideoExchangeOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VideoExchangeOrder rename(String name) {
        return new VideoExchangeOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VideoExchangeOrder rename(Name name) {
        return new VideoExchangeOrder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, Long, Long, String, String, Long, Long, Integer, Integer, Integer, Integer, Long, Integer, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
