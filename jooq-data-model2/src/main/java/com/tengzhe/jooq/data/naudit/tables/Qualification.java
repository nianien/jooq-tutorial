/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.QualificationRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Qualification extends TableImpl<QualificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.qualification</code>
     */
    public static final Qualification QUALIFICATION = new Qualification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QualificationRecord> getRecordType() {
        return QualificationRecord.class;
    }

    /**
     * The column <code>naudit.qualification.id</code>.
     */
    public final TableField<QualificationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.qualification.source</code>.
     */
    public final TableField<QualificationRecord, Integer> SOURCE = createField(DSL.name("source"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.qualification.qual_type</code>.
     */
    public final TableField<QualificationRecord, Integer> QUAL_TYPE = createField(DSL.name("qual_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.qualification.qual_name</code>.
     */
    public final TableField<QualificationRecord, String> QUAL_NAME = createField(DSL.name("qual_name"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field("-1", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.qualification.qual_url</code>.
     */
    public final TableField<QualificationRecord, String> QUAL_URL = createField(DSL.name("qual_url"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>naudit.qualification.qual_md5</code>.
     */
    public final TableField<QualificationRecord, String> QUAL_MD5 = createField(DSL.name("qual_md5"), SQLDataType.VARCHAR(128).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.qualification.expired_date</code>.
     */
    public final TableField<QualificationRecord, LocalDate> EXPIRED_DATE = createField(DSL.name("expired_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>naudit.qualification.version</code>.
     */
    public final TableField<QualificationRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>naudit.qualification.create_time</code>.
     */
    public final TableField<QualificationRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Qualification(Name alias, Table<QualificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Qualification(Name alias, Table<QualificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.qualification</code> table reference
     */
    public Qualification(String alias) {
        this(DSL.name(alias), QUALIFICATION);
    }

    /**
     * Create an aliased <code>naudit.qualification</code> table reference
     */
    public Qualification(Name alias) {
        this(alias, QUALIFICATION);
    }

    /**
     * Create a <code>naudit.qualification</code> table reference
     */
    public Qualification() {
        this(DSL.name("qualification"), null);
    }

    public <O extends Record> Qualification(Table<O> child, ForeignKey<O, QualificationRecord> key) {
        super(child, key, QUALIFICATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<QualificationRecord, Long> getIdentity() {
        return (Identity<QualificationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QualificationRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public Qualification as(String alias) {
        return new Qualification(DSL.name(alias), this);
    }

    @Override
    public Qualification as(Name alias) {
        return new Qualification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Qualification rename(String name) {
        return new Qualification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Qualification rename(Name name) {
        return new Qualification(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, Integer, String, String, String, LocalDate, Long, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
