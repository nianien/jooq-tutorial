/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.material.tables;


import com.tengzhe.jooq.data.material.Keys;
import com.tengzhe.jooq.data.material.Material;
import com.tengzhe.jooq.data.material.tables.records.DspIdeaRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DspIdea extends TableImpl<DspIdeaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>material.dsp_idea</code>
     */
    public static final DspIdea DSP_IDEA = new DspIdea();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DspIdeaRecord> getRecordType() {
        return DspIdeaRecord.class;
    }

    /**
     * The column <code>material.dsp_idea.id</code>.
     */
    public final TableField<DspIdeaRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>material.dsp_idea.user_id</code>.
     */
    public final TableField<DspIdeaRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>material.dsp_idea.title</code>.
     */
    public final TableField<DspIdeaRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>material.dsp_idea.description</code>.
     */
    public final TableField<DspIdeaRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>material.dsp_idea.source</code>.
     */
    public final TableField<DspIdeaRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.VARCHAR(128).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>material.dsp_idea.target_url</code>.
     */
    public final TableField<DspIdeaRecord, String> TARGET_URL = createField(DSL.name("target_url"), SQLDataType.VARCHAR(1024).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>material.dsp_idea.img_urls</code>.
     */
    public final TableField<DspIdeaRecord, String> IMG_URLS = createField(DSL.name("img_urls"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>material.dsp_idea.video_urls</code>.
     */
    public final TableField<DspIdeaRecord, String> VIDEO_URLS = createField(DSL.name("video_urls"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>material.dsp_idea.idea_ids</code>.
     */
    public final TableField<DspIdeaRecord, String> IDEA_IDS = createField(DSL.name("idea_ids"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("''", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>material.dsp_idea.click</code>.
     */
    public final TableField<DspIdeaRecord, Long> CLICK = createField(DSL.name("click"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.dsp_idea.show</code>.
     */
    public final TableField<DspIdeaRecord, Long> SHOW = createField(DSL.name("show"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.dsp_idea.consume</code>.
     */
    public final TableField<DspIdeaRecord, Long> CONSUME = createField(DSL.name("consume"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.dsp_idea.logic_state</code>.
     */
    public final TableField<DspIdeaRecord, Integer> LOGIC_STATE = createField(DSL.name("logic_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.dsp_idea.version</code>.
     */
    public final TableField<DspIdeaRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.dsp_idea.state</code>.
     */
    public final TableField<DspIdeaRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.dsp_idea.state_detail</code>.
     */
    public final TableField<DspIdeaRecord, Integer> STATE_DETAIL = createField(DSL.name("state_detail"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.dsp_idea.sample_state</code>.
     */
    public final TableField<DspIdeaRecord, Integer> SAMPLE_STATE = createField(DSL.name("sample_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.dsp_idea.sent</code>.
     */
    public final TableField<DspIdeaRecord, Integer> SENT = createField(DSL.name("sent"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.dsp_idea.create_time</code>.
     */
    public final TableField<DspIdeaRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>material.dsp_idea.modify_time</code>.
     */
    public final TableField<DspIdeaRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private DspIdea(Name alias, Table<DspIdeaRecord> aliased) {
        this(alias, aliased, null);
    }

    private DspIdea(Name alias, Table<DspIdeaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>material.dsp_idea</code> table reference
     */
    public DspIdea(String alias) {
        this(DSL.name(alias), DSP_IDEA);
    }

    /**
     * Create an aliased <code>material.dsp_idea</code> table reference
     */
    public DspIdea(Name alias) {
        this(alias, DSP_IDEA);
    }

    /**
     * Create a <code>material.dsp_idea</code> table reference
     */
    public DspIdea() {
        this(DSL.name("dsp_idea"), null);
    }

    public <O extends Record> DspIdea(Table<O> child, ForeignKey<O, DspIdeaRecord> key) {
        super(child, key, DSP_IDEA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Material.MATERIAL;
    }

    @Override
    public Identity<DspIdeaRecord, Long> getIdentity() {
        return (Identity<DspIdeaRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DspIdeaRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1B;
    }

    @Override
    public DspIdea as(String alias) {
        return new DspIdea(DSL.name(alias), this);
    }

    @Override
    public DspIdea as(Name alias) {
        return new DspIdea(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DspIdea rename(String name) {
        return new DspIdea(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DspIdea rename(Name name) {
        return new DspIdea(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, Long, String, String, String, String, String, String, String, Long, Long, Long, Integer, Long, Integer, Integer, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
