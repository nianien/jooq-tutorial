/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.material.tables;


import com.tengzhe.jooq.data.material.Keys;
import com.tengzhe.jooq.data.material.Material;
import com.tengzhe.jooq.data.material.tables.records.AuditPairRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditPair extends TableImpl<AuditPairRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>material.audit_pair</code>
     */
    public static final AuditPair AUDIT_PAIR = new AuditPair();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditPairRecord> getRecordType() {
        return AuditPairRecord.class;
    }

    /**
     * The column <code>material.audit_pair.id</code>.
     */
    public final TableField<AuditPairRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>material.audit_pair.entity_id</code>.
     */
    public final TableField<AuditPairRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.audit_pair.entity_type</code>.
     */
    public final TableField<AuditPairRecord, Integer> ENTITY_TYPE = createField(DSL.name("entity_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.audit_pair.version</code>.
     */
    public final TableField<AuditPairRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.audit_pair.target_id</code>.
     */
    public final TableField<AuditPairRecord, Long> TARGET_ID = createField(DSL.name("target_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.audit_pair.word</code>.
     */
    public final TableField<AuditPairRecord, String> WORD = createField(DSL.name("word"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>material.audit_pair.reason</code>.
     */
    public final TableField<AuditPairRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>material.audit_pair.create_time</code>.
     */
    public final TableField<AuditPairRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>material.audit_pair.modify_time</code>.
     */
    public final TableField<AuditPairRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditPair(Name alias, Table<AuditPairRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditPair(Name alias, Table<AuditPairRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>material.audit_pair</code> table reference
     */
    public AuditPair(String alias) {
        this(DSL.name(alias), AUDIT_PAIR);
    }

    /**
     * Create an aliased <code>material.audit_pair</code> table reference
     */
    public AuditPair(Name alias) {
        this(alias, AUDIT_PAIR);
    }

    /**
     * Create a <code>material.audit_pair</code> table reference
     */
    public AuditPair() {
        this(DSL.name("audit_pair"), null);
    }

    public <O extends Record> AuditPair(Table<O> child, ForeignKey<O, AuditPairRecord> key) {
        super(child, key, AUDIT_PAIR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Material.MATERIAL;
    }

    @Override
    public Identity<AuditPairRecord, Long> getIdentity() {
        return (Identity<AuditPairRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditPairRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_64;
    }

    @Override
    public AuditPair as(String alias) {
        return new AuditPair(DSL.name(alias), this);
    }

    @Override
    public AuditPair as(Name alias) {
        return new AuditPair(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditPair rename(String name) {
        return new AuditPair(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditPair rename(Name name) {
        return new AuditPair(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Integer, Long, Long, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
