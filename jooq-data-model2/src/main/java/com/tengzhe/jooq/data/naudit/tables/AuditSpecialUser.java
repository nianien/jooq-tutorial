/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.AuditSpecialUserRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditSpecialUser extends TableImpl<AuditSpecialUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.audit_special_user</code>
     */
    public static final AuditSpecialUser AUDIT_SPECIAL_USER = new AuditSpecialUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditSpecialUserRecord> getRecordType() {
        return AuditSpecialUserRecord.class;
    }

    /**
     * The column <code>naudit.audit_special_user.id</code>.
     */
    public final TableField<AuditSpecialUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.audit_special_user.user_id</code>.
     */
    public final TableField<AuditSpecialUserRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_special_user.target_id</code>.
     */
    public final TableField<AuditSpecialUserRecord, Long> TARGET_ID = createField(DSL.name("target_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_special_user.type</code>.
     */
    public final TableField<AuditSpecialUserRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_special_user.create_time</code>.
     */
    public final TableField<AuditSpecialUserRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>naudit.audit_special_user.modify_time</code>.
     */
    public final TableField<AuditSpecialUserRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditSpecialUser(Name alias, Table<AuditSpecialUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditSpecialUser(Name alias, Table<AuditSpecialUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.audit_special_user</code> table reference
     */
    public AuditSpecialUser(String alias) {
        this(DSL.name(alias), AUDIT_SPECIAL_USER);
    }

    /**
     * Create an aliased <code>naudit.audit_special_user</code> table reference
     */
    public AuditSpecialUser(Name alias) {
        this(alias, AUDIT_SPECIAL_USER);
    }

    /**
     * Create a <code>naudit.audit_special_user</code> table reference
     */
    public AuditSpecialUser() {
        this(DSL.name("audit_special_user"), null);
    }

    public <O extends Record> AuditSpecialUser(Table<O> child, ForeignKey<O, AuditSpecialUserRecord> key) {
        super(child, key, AUDIT_SPECIAL_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<AuditSpecialUserRecord, Long> getIdentity() {
        return (Identity<AuditSpecialUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditSpecialUserRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E0;
    }

    @Override
    public AuditSpecialUser as(String alias) {
        return new AuditSpecialUser(DSL.name(alias), this);
    }

    @Override
    public AuditSpecialUser as(Name alias) {
        return new AuditSpecialUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditSpecialUser rename(String name) {
        return new AuditSpecialUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditSpecialUser rename(Name name) {
        return new AuditSpecialUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
