/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.AuditTagRelationRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditTagRelation extends TableImpl<AuditTagRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.audit_tag_relation</code>
     */
    public static final AuditTagRelation AUDIT_TAG_RELATION = new AuditTagRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditTagRelationRecord> getRecordType() {
        return AuditTagRelationRecord.class;
    }

    /**
     * The column <code>naudit.audit_tag_relation.id</code>.
     */
    public final TableField<AuditTagRelationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.audit_tag_relation.tag_type</code>.
     */
    public final TableField<AuditTagRelationRecord, Integer> TAG_TYPE = createField(DSL.name("tag_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_tag_relation.target_id</code>.
     */
    public final TableField<AuditTagRelationRecord, Long> TARGET_ID = createField(DSL.name("target_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_tag_relation.target_type</code>.
     */
    public final TableField<AuditTagRelationRecord, Integer> TARGET_TYPE = createField(DSL.name("target_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_tag_relation.biz_type</code>.
     */
    public final TableField<AuditTagRelationRecord, String> BIZ_TYPE = createField(DSL.name("biz_type"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.audit_tag_relation.code</code>.
     */
    public final TableField<AuditTagRelationRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>naudit.audit_tag_relation.score</code>.
     */
    public final TableField<AuditTagRelationRecord, String> SCORE = createField(DSL.name("score"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>naudit.audit_tag_relation.tag</code>.
     */
    public final TableField<AuditTagRelationRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.audit_tag_relation.creator</code>.
     */
    public final TableField<AuditTagRelationRecord, Long> CREATOR = createField(DSL.name("creator"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>naudit.audit_tag_relation.create_time</code>.
     */
    public final TableField<AuditTagRelationRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditTagRelation(Name alias, Table<AuditTagRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditTagRelation(Name alias, Table<AuditTagRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.audit_tag_relation</code> table reference
     */
    public AuditTagRelation(String alias) {
        this(DSL.name(alias), AUDIT_TAG_RELATION);
    }

    /**
     * Create an aliased <code>naudit.audit_tag_relation</code> table reference
     */
    public AuditTagRelation(Name alias) {
        this(alias, AUDIT_TAG_RELATION);
    }

    /**
     * Create a <code>naudit.audit_tag_relation</code> table reference
     */
    public AuditTagRelation() {
        this(DSL.name("audit_tag_relation"), null);
    }

    public <O extends Record> AuditTagRelation(Table<O> child, ForeignKey<O, AuditTagRelationRecord> key) {
        super(child, key, AUDIT_TAG_RELATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<AuditTagRelationRecord, Long> getIdentity() {
        return (Identity<AuditTagRelationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditTagRelationRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_41;
    }

    @Override
    public AuditTagRelation as(String alias) {
        return new AuditTagRelation(DSL.name(alias), this);
    }

    @Override
    public AuditTagRelation as(Name alias) {
        return new AuditTagRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditTagRelation rename(String name) {
        return new AuditTagRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditTagRelation rename(Name name) {
        return new AuditTagRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Integer, Long, Integer, String, String, String, String, Long, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
