/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.material.tables;


import com.tengzhe.jooq.data.material.Keys;
import com.tengzhe.jooq.data.material.Material;
import com.tengzhe.jooq.data.material.tables.records.AuditDspIdeaRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditDspIdea extends TableImpl<AuditDspIdeaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>material.audit_dsp_idea</code>
     */
    public static final AuditDspIdea AUDIT_DSP_IDEA = new AuditDspIdea();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditDspIdeaRecord> getRecordType() {
        return AuditDspIdeaRecord.class;
    }

    /**
     * The column <code>material.audit_dsp_idea.id</code>.
     */
    public final TableField<AuditDspIdeaRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>material.audit_dsp_idea.entity_id</code>.
     */
    public final TableField<AuditDspIdeaRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.version</code>.
     */
    public final TableField<AuditDspIdeaRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.audit_type</code>.
     */
    public final TableField<AuditDspIdeaRecord, Integer> AUDIT_TYPE = createField(DSL.name("audit_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.user_id</code>.
     */
    public final TableField<AuditDspIdeaRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.audit_state</code>.
     */
    public final TableField<AuditDspIdeaRecord, Integer> AUDIT_STATE = createField(DSL.name("audit_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.auditor_id</code>.
     */
    public final TableField<AuditDspIdeaRecord, Long> AUDITOR_ID = createField(DSL.name("auditor_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.reason_code</code>.
     */
    public final TableField<AuditDspIdeaRecord, String> REASON_CODE = createField(DSL.name("reason_code"), SQLDataType.VARCHAR(4096).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.reason</code>.
     */
    public final TableField<AuditDspIdeaRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(4096).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.audit_start_time</code>.
     */
    public final TableField<AuditDspIdeaRecord, LocalDateTime> AUDIT_START_TIME = createField(DSL.name("audit_start_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.audit_end_time</code>.
     */
    public final TableField<AuditDspIdeaRecord, LocalDateTime> AUDIT_END_TIME = createField(DSL.name("audit_end_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'2000-01-01 00:00:00'", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.extend</code>.
     */
    public final TableField<AuditDspIdeaRecord, String> EXTEND = createField(DSL.name("extend"), SQLDataType.VARCHAR(4096).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.modify_time</code>.
     */
    public final TableField<AuditDspIdeaRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.modify_day_tag</code>.
     */
    public final TableField<AuditDspIdeaRecord, Integer> MODIFY_DAY_TAG = createField(DSL.name("modify_day_tag"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.audit_dsp_idea.create_time</code>.
     */
    public final TableField<AuditDspIdeaRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditDspIdea(Name alias, Table<AuditDspIdeaRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditDspIdea(Name alias, Table<AuditDspIdeaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>material.audit_dsp_idea</code> table reference
     */
    public AuditDspIdea(String alias) {
        this(DSL.name(alias), AUDIT_DSP_IDEA);
    }

    /**
     * Create an aliased <code>material.audit_dsp_idea</code> table reference
     */
    public AuditDspIdea(Name alias) {
        this(alias, AUDIT_DSP_IDEA);
    }

    /**
     * Create a <code>material.audit_dsp_idea</code> table reference
     */
    public AuditDspIdea() {
        this(DSL.name("audit_dsp_idea"), null);
    }

    public <O extends Record> AuditDspIdea(Table<O> child, ForeignKey<O, AuditDspIdeaRecord> key) {
        super(child, key, AUDIT_DSP_IDEA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Material.MATERIAL;
    }

    @Override
    public Identity<AuditDspIdeaRecord, Long> getIdentity() {
        return (Identity<AuditDspIdeaRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditDspIdeaRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7CB;
    }

    @Override
    public AuditDspIdea as(String alias) {
        return new AuditDspIdea(DSL.name(alias), this);
    }

    @Override
    public AuditDspIdea as(Name alias) {
        return new AuditDspIdea(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditDspIdea rename(String name) {
        return new AuditDspIdea(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditDspIdea rename(Name name) {
        return new AuditDspIdea(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, Long, Long, Integer, Long, Integer, Long, String, String, LocalDateTime, LocalDateTime, String, LocalDateTime, Integer, LocalDateTime> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
