/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables;


import com.tengzhe.jooq.data.naudit.Keys;
import com.tengzhe.jooq.data.naudit.Naudit;
import com.tengzhe.jooq.data.naudit.tables.records.AuditTagTypeConfigRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditTagTypeConfig extends TableImpl<AuditTagTypeConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>naudit.audit_tag_type_config</code>
     */
    public static final AuditTagTypeConfig AUDIT_TAG_TYPE_CONFIG = new AuditTagTypeConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditTagTypeConfigRecord> getRecordType() {
        return AuditTagTypeConfigRecord.class;
    }

    /**
     * The column <code>naudit.audit_tag_type_config.id</code>.
     */
    public final TableField<AuditTagTypeConfigRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>naudit.audit_tag_type_config.category</code>.
     */
    public final TableField<AuditTagTypeConfigRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.audit_tag_type_config.desc</code>.
     */
    public final TableField<AuditTagTypeConfigRecord, String> DESC = createField(DSL.name("desc"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>naudit.audit_tag_type_config.repeated</code>.
     */
    public final TableField<AuditTagTypeConfigRecord, Integer> REPEATED = createField(DSL.name("repeated"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.audit_tag_type_config.delivery</code>.
     */
    public final TableField<AuditTagTypeConfigRecord, Integer> DELIVERY = createField(DSL.name("delivery"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>naudit.audit_tag_type_config.remark</code>.
     */
    public final TableField<AuditTagTypeConfigRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    private AuditTagTypeConfig(Name alias, Table<AuditTagTypeConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditTagTypeConfig(Name alias, Table<AuditTagTypeConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>naudit.audit_tag_type_config</code> table
     * reference
     */
    public AuditTagTypeConfig(String alias) {
        this(DSL.name(alias), AUDIT_TAG_TYPE_CONFIG);
    }

    /**
     * Create an aliased <code>naudit.audit_tag_type_config</code> table
     * reference
     */
    public AuditTagTypeConfig(Name alias) {
        this(alias, AUDIT_TAG_TYPE_CONFIG);
    }

    /**
     * Create a <code>naudit.audit_tag_type_config</code> table reference
     */
    public AuditTagTypeConfig() {
        this(DSL.name("audit_tag_type_config"), null);
    }

    public <O extends Record> AuditTagTypeConfig(Table<O> child, ForeignKey<O, AuditTagTypeConfigRecord> key) {
        super(child, key, AUDIT_TAG_TYPE_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Naudit.NAUDIT;
    }

    @Override
    public Identity<AuditTagTypeConfigRecord, Long> getIdentity() {
        return (Identity<AuditTagTypeConfigRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditTagTypeConfigRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    @Override
    public AuditTagTypeConfig as(String alias) {
        return new AuditTagTypeConfig(DSL.name(alias), this);
    }

    @Override
    public AuditTagTypeConfig as(Name alias) {
        return new AuditTagTypeConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditTagTypeConfig rename(String name) {
        return new AuditTagTypeConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditTagTypeConfig rename(Name name) {
        return new AuditTagTypeConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, Integer, Integer, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
