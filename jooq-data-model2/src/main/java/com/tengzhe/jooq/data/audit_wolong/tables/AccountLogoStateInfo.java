/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.audit_wolong.tables;


import com.tengzhe.jooq.data.audit_wolong.AuditWolong;
import com.tengzhe.jooq.data.audit_wolong.Keys;
import com.tengzhe.jooq.data.audit_wolong.tables.records.AccountLogoStateInfoRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountLogoStateInfo extends TableImpl<AccountLogoStateInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>audit_wolong.account_logo_state_info</code>
     */
    public static final AccountLogoStateInfo ACCOUNT_LOGO_STATE_INFO = new AccountLogoStateInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountLogoStateInfoRecord> getRecordType() {
        return AccountLogoStateInfoRecord.class;
    }

    /**
     * The column <code>audit_wolong.account_logo_state_info.id</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_wolong.account_logo_state_info.user_id</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>audit_wolong.account_logo_state_info.state</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.account_logo_state_info.auditor_id</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, Long> AUDITOR_ID = createField(DSL.name("auditor_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.account_logo_state_info.audit_time</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, LocalDateTime> AUDIT_TIME = createField(DSL.name("audit_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'2010-01-01 00:00:00'", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.account_logo_state_info.create_time</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'2010-01-01 00:00:00'", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.account_logo_state_info.modify_time</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>audit_wolong.account_logo_state_info.manual_state</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, Integer> MANUAL_STATE = createField(DSL.name("manual_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>audit_wolong.account_logo_state_info.manual_reason</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, String> MANUAL_REASON = createField(DSL.name("manual_reason"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>audit_wolong.account_logo_state_info.manual_auditor_id</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, Long> MANUAL_AUDITOR_ID = createField(DSL.name("manual_auditor_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>audit_wolong.account_logo_state_info.manual_audit_time</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, LocalDateTime> MANUAL_AUDIT_TIME = createField(DSL.name("manual_audit_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'1999-01-01 00:00:00'", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>audit_wolong.account_logo_state_info.manual_version</code>.
     */
    public final TableField<AccountLogoStateInfoRecord, Long> MANUAL_VERSION = createField(DSL.name("manual_version"), SQLDataType.BIGINT.nullable(false), this, "");

    private AccountLogoStateInfo(Name alias, Table<AccountLogoStateInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountLogoStateInfo(Name alias, Table<AccountLogoStateInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_wolong.account_logo_state_info</code> table
     * reference
     */
    public AccountLogoStateInfo(String alias) {
        this(DSL.name(alias), ACCOUNT_LOGO_STATE_INFO);
    }

    /**
     * Create an aliased <code>audit_wolong.account_logo_state_info</code> table
     * reference
     */
    public AccountLogoStateInfo(Name alias) {
        this(alias, ACCOUNT_LOGO_STATE_INFO);
    }

    /**
     * Create a <code>audit_wolong.account_logo_state_info</code> table
     * reference
     */
    public AccountLogoStateInfo() {
        this(DSL.name("account_logo_state_info"), null);
    }

    public <O extends Record> AccountLogoStateInfo(Table<O> child, ForeignKey<O, AccountLogoStateInfoRecord> key) {
        super(child, key, ACCOUNT_LOGO_STATE_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditWolong.AUDIT_WOLONG;
    }

    @Override
    public Identity<AccountLogoStateInfoRecord, Long> getIdentity() {
        return (Identity<AccountLogoStateInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccountLogoStateInfoRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_80;
    }

    @Override
    public AccountLogoStateInfo as(String alias) {
        return new AccountLogoStateInfo(DSL.name(alias), this);
    }

    @Override
    public AccountLogoStateInfo as(Name alias) {
        return new AccountLogoStateInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountLogoStateInfo rename(String name) {
        return new AccountLogoStateInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountLogoStateInfo rename(Name name) {
        return new AccountLogoStateInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, Integer, Long, LocalDateTime, LocalDateTime, LocalDateTime, Integer, String, Long, LocalDateTime, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
