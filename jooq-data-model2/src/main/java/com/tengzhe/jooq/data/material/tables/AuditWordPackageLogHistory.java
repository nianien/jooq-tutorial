/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.material.tables;


import com.tengzhe.jooq.data.material.Keys;
import com.tengzhe.jooq.data.material.Material;
import com.tengzhe.jooq.data.material.tables.records.AuditWordPackageLogHistoryRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditWordPackageLogHistory extends TableImpl<AuditWordPackageLogHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>material.audit_word_package_log_history</code>
     */
    public static final AuditWordPackageLogHistory AUDIT_WORD_PACKAGE_LOG_HISTORY = new AuditWordPackageLogHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditWordPackageLogHistoryRecord> getRecordType() {
        return AuditWordPackageLogHistoryRecord.class;
    }

    /**
     * The column <code>material.audit_word_package_log_history.id</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>material.audit_word_package_log_history.package_id</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, Long> PACKAGE_ID = createField(DSL.name("package_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>material.audit_word_package_log_history.uc_id</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, Long> UC_ID = createField(DSL.name("uc_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>material.audit_word_package_log_history.user_id</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>material.audit_word_package_log_history.package_name</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, String> PACKAGE_NAME = createField(DSL.name("package_name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column
     * <code>material.audit_word_package_log_history.package_type</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, Integer> PACKAGE_TYPE = createField(DSL.name("package_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>material.audit_word_package_log_history.version</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>material.audit_word_package_log_history.word</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, String> WORD = createField(DSL.name("word"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>material.audit_word_package_log_history.state</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>material.audit_word_package_log_history.audit_type</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, String> AUDIT_TYPE = createField(DSL.name("audit_type"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>material.audit_word_package_log_history.audit_detail</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, String> AUDIT_DETAIL = createField(DSL.name("audit_detail"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>material.audit_word_package_log_history.create_time</code>.
     */
    public final TableField<AuditWordPackageLogHistoryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AuditWordPackageLogHistory(Name alias, Table<AuditWordPackageLogHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditWordPackageLogHistory(Name alias, Table<AuditWordPackageLogHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>material.audit_word_package_log_history</code>
     * table reference
     */
    public AuditWordPackageLogHistory(String alias) {
        this(DSL.name(alias), AUDIT_WORD_PACKAGE_LOG_HISTORY);
    }

    /**
     * Create an aliased <code>material.audit_word_package_log_history</code>
     * table reference
     */
    public AuditWordPackageLogHistory(Name alias) {
        this(alias, AUDIT_WORD_PACKAGE_LOG_HISTORY);
    }

    /**
     * Create a <code>material.audit_word_package_log_history</code> table
     * reference
     */
    public AuditWordPackageLogHistory() {
        this(DSL.name("audit_word_package_log_history"), null);
    }

    public <O extends Record> AuditWordPackageLogHistory(Table<O> child, ForeignKey<O, AuditWordPackageLogHistoryRecord> key) {
        super(child, key, AUDIT_WORD_PACKAGE_LOG_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Material.MATERIAL;
    }

    @Override
    public Identity<AuditWordPackageLogHistoryRecord, Long> getIdentity() {
        return (Identity<AuditWordPackageLogHistoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditWordPackageLogHistoryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_AB;
    }

    @Override
    public AuditWordPackageLogHistory as(String alias) {
        return new AuditWordPackageLogHistory(DSL.name(alias), this);
    }

    @Override
    public AuditWordPackageLogHistory as(Name alias) {
        return new AuditWordPackageLogHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditWordPackageLogHistory rename(String name) {
        return new AuditWordPackageLogHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditWordPackageLogHistory rename(Name name) {
        return new AuditWordPackageLogHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, Long, Long, String, Integer, Long, String, Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
