/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.naudit.tables.records;


import com.tengzhe.jooq.data.naudit.tables.ExpiredCommentWarnTask;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExpiredCommentWarnTaskRecord extends UpdatableRecordImpl<ExpiredCommentWarnTaskRecord> implements Record14<Long, Long, Integer, Long, Integer, String, String, LocalDateTime, Long, LocalDateTime, Integer, Long, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>naudit.expired_comment_warn_task.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.comment_id</code>.
     */
    public void setCommentId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.comment_id</code>.
     */
    public Long getCommentId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.comment_type</code>.
     */
    public void setCommentType(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.comment_type</code>.
     */
    public Integer getCommentType() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.target_id</code>.
     */
    public void setTargetId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.target_id</code>.
     */
    public Long getTargetId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.target_type</code>.
     */
    public void setTargetType(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.target_type</code>.
     */
    public Integer getTargetType() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.biz_type</code>.
     */
    public void setBizType(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.biz_type</code>.
     */
    public String getBizType() {
        return (String) get(5);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.content</code>.
     */
    public void setContent(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.content</code>.
     */
    public String getContent() {
        return (String) get(6);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.expire_time</code>.
     */
    public void setExpireTime(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.expire_time</code>.
     */
    public LocalDateTime getExpireTime() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for
     * <code>naudit.expired_comment_warn_task.comment_operator</code>.
     */
    public void setCommentOperator(Long value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>naudit.expired_comment_warn_task.comment_operator</code>.
     */
    public Long getCommentOperator() {
        return (Long) get(8);
    }

    /**
     * Setter for
     * <code>naudit.expired_comment_warn_task.comment_create_time</code>.
     */
    public void setCommentCreateTime(LocalDateTime value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>naudit.expired_comment_warn_task.comment_create_time</code>.
     */
    public LocalDateTime getCommentCreateTime() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.state</code>.
     */
    public void setState(Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.state</code>.
     */
    public Integer getState() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.operator</code>.
     */
    public void setOperator(Long value) {
        set(11, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.operator</code>.
     */
    public Long getOperator() {
        return (Long) get(11);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.create_time</code>.
     */
    public void setCreateTime(LocalDateTime value) {
        set(12, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.create_time</code>.
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(12);
    }

    /**
     * Setter for <code>naudit.expired_comment_warn_task.handle_time</code>.
     */
    public void setHandleTime(LocalDateTime value) {
        set(13, value);
    }

    /**
     * Getter for <code>naudit.expired_comment_warn_task.handle_time</code>.
     */
    public LocalDateTime getHandleTime() {
        return (LocalDateTime) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Integer, Long, Integer, String, String, LocalDateTime, Long, LocalDateTime, Integer, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Long, Long, Integer, Long, Integer, String, String, LocalDateTime, Long, LocalDateTime, Integer, Long, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.ID;
    }

    @Override
    public Field<Long> field2() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.COMMENT_ID;
    }

    @Override
    public Field<Integer> field3() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.COMMENT_TYPE;
    }

    @Override
    public Field<Long> field4() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.TARGET_ID;
    }

    @Override
    public Field<Integer> field5() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.TARGET_TYPE;
    }

    @Override
    public Field<String> field6() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.BIZ_TYPE;
    }

    @Override
    public Field<String> field7() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.CONTENT;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.EXPIRE_TIME;
    }

    @Override
    public Field<Long> field9() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.COMMENT_OPERATOR;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.COMMENT_CREATE_TIME;
    }

    @Override
    public Field<Integer> field11() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.STATE;
    }

    @Override
    public Field<Long> field12() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.OPERATOR;
    }

    @Override
    public Field<LocalDateTime> field13() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.CREATE_TIME;
    }

    @Override
    public Field<LocalDateTime> field14() {
        return ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK.HANDLE_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getCommentId();
    }

    @Override
    public Integer component3() {
        return getCommentType();
    }

    @Override
    public Long component4() {
        return getTargetId();
    }

    @Override
    public Integer component5() {
        return getTargetType();
    }

    @Override
    public String component6() {
        return getBizType();
    }

    @Override
    public String component7() {
        return getContent();
    }

    @Override
    public LocalDateTime component8() {
        return getExpireTime();
    }

    @Override
    public Long component9() {
        return getCommentOperator();
    }

    @Override
    public LocalDateTime component10() {
        return getCommentCreateTime();
    }

    @Override
    public Integer component11() {
        return getState();
    }

    @Override
    public Long component12() {
        return getOperator();
    }

    @Override
    public LocalDateTime component13() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime component14() {
        return getHandleTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getCommentId();
    }

    @Override
    public Integer value3() {
        return getCommentType();
    }

    @Override
    public Long value4() {
        return getTargetId();
    }

    @Override
    public Integer value5() {
        return getTargetType();
    }

    @Override
    public String value6() {
        return getBizType();
    }

    @Override
    public String value7() {
        return getContent();
    }

    @Override
    public LocalDateTime value8() {
        return getExpireTime();
    }

    @Override
    public Long value9() {
        return getCommentOperator();
    }

    @Override
    public LocalDateTime value10() {
        return getCommentCreateTime();
    }

    @Override
    public Integer value11() {
        return getState();
    }

    @Override
    public Long value12() {
        return getOperator();
    }

    @Override
    public LocalDateTime value13() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime value14() {
        return getHandleTime();
    }

    @Override
    public ExpiredCommentWarnTaskRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value2(Long value) {
        setCommentId(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value3(Integer value) {
        setCommentType(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value4(Long value) {
        setTargetId(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value5(Integer value) {
        setTargetType(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value6(String value) {
        setBizType(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value7(String value) {
        setContent(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value8(LocalDateTime value) {
        setExpireTime(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value9(Long value) {
        setCommentOperator(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value10(LocalDateTime value) {
        setCommentCreateTime(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value11(Integer value) {
        setState(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value12(Long value) {
        setOperator(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value13(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord value14(LocalDateTime value) {
        setHandleTime(value);
        return this;
    }

    @Override
    public ExpiredCommentWarnTaskRecord values(Long value1, Long value2, Integer value3, Long value4, Integer value5, String value6, String value7, LocalDateTime value8, Long value9, LocalDateTime value10, Integer value11, Long value12, LocalDateTime value13, LocalDateTime value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExpiredCommentWarnTaskRecord
     */
    public ExpiredCommentWarnTaskRecord() {
        super(ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK);
    }

    /**
     * Create a detached, initialised ExpiredCommentWarnTaskRecord
     */
    public ExpiredCommentWarnTaskRecord(Long id, Long commentId, Integer commentType, Long targetId, Integer targetType, String bizType, String content, LocalDateTime expireTime, Long commentOperator, LocalDateTime commentCreateTime, Integer state, Long operator, LocalDateTime createTime, LocalDateTime handleTime) {
        super(ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK);

        setId(id);
        setCommentId(commentId);
        setCommentType(commentType);
        setTargetId(targetId);
        setTargetType(targetType);
        setBizType(bizType);
        setContent(content);
        setExpireTime(expireTime);
        setCommentOperator(commentOperator);
        setCommentCreateTime(commentCreateTime);
        setState(state);
        setOperator(operator);
        setCreateTime(createTime);
        setHandleTime(handleTime);
    }

    /**
     * Create a detached, initialised ExpiredCommentWarnTaskRecord
     */
    public ExpiredCommentWarnTaskRecord(com.tengzhe.jooq.data.naudit.tables.pojos.ExpiredCommentWarnTask value) {
        super(ExpiredCommentWarnTask.EXPIRED_COMMENT_WARN_TASK);

        if (value != null) {
            setId(value.getId());
            setCommentId(value.getCommentId());
            setCommentType(value.getCommentType());
            setTargetId(value.getTargetId());
            setTargetType(value.getTargetType());
            setBizType(value.getBizType());
            setContent(value.getContent());
            setExpireTime(value.getExpireTime());
            setCommentOperator(value.getCommentOperator());
            setCommentCreateTime(value.getCommentCreateTime());
            setState(value.getState());
            setOperator(value.getOperator());
            setCreateTime(value.getCreateTime());
            setHandleTime(value.getHandleTime());
        }
    }
}
