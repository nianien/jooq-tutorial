/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.material.tables;


import com.tengzhe.jooq.data.material.Keys;
import com.tengzhe.jooq.data.material.Material;
import com.tengzhe.jooq.data.material.tables.records.AraQueryWordRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AraQueryWord extends TableImpl<AraQueryWordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>material.ara_query_word</code>
     */
    public static final AraQueryWord ARA_QUERY_WORD = new AraQueryWord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AraQueryWordRecord> getRecordType() {
        return AraQueryWordRecord.class;
    }

    /**
     * The column <code>material.ara_query_word.id</code>.
     */
    public final TableField<AraQueryWordRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>material.ara_query_word.word</code>.
     */
    public final TableField<AraQueryWordRecord, String> WORD = createField(DSL.name("word"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>material.ara_query_word.dt</code>.
     */
    public final TableField<AraQueryWordRecord, Integer> DT = createField(DSL.name("dt"), SQLDataType.INTEGER, this, "");

    private AraQueryWord(Name alias, Table<AraQueryWordRecord> aliased) {
        this(alias, aliased, null);
    }

    private AraQueryWord(Name alias, Table<AraQueryWordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>material.ara_query_word</code> table reference
     */
    public AraQueryWord(String alias) {
        this(DSL.name(alias), ARA_QUERY_WORD);
    }

    /**
     * Create an aliased <code>material.ara_query_word</code> table reference
     */
    public AraQueryWord(Name alias) {
        this(alias, ARA_QUERY_WORD);
    }

    /**
     * Create a <code>material.ara_query_word</code> table reference
     */
    public AraQueryWord() {
        this(DSL.name("ara_query_word"), null);
    }

    public <O extends Record> AraQueryWord(Table<O> child, ForeignKey<O, AraQueryWordRecord> key) {
        super(child, key, ARA_QUERY_WORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Material.MATERIAL;
    }

    @Override
    public Identity<AraQueryWordRecord, Long> getIdentity() {
        return (Identity<AraQueryWordRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AraQueryWordRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_EC;
    }

    @Override
    public AraQueryWord as(String alias) {
        return new AraQueryWord(DSL.name(alias), this);
    }

    @Override
    public AraQueryWord as(Name alias) {
        return new AraQueryWord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AraQueryWord rename(String name) {
        return new AraQueryWord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AraQueryWord rename(Name name) {
        return new AraQueryWord(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
