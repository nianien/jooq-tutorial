/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.audit_wolong.tables;


import com.tengzhe.jooq.data.audit_wolong.AuditWolong;
import com.tengzhe.jooq.data.audit_wolong.Keys;
import com.tengzhe.jooq.data.audit_wolong.tables.records.UcAccountRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UcAccount extends TableImpl<UcAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_wolong.uc_account</code>
     */
    public static final UcAccount UC_ACCOUNT = new UcAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UcAccountRecord> getRecordType() {
        return UcAccountRecord.class;
    }

    /**
     * The column <code>audit_wolong.uc_account.userid</code>.
     */
    public final TableField<UcAccountRecord, Long> USERID = createField(DSL.name("userid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.user_name</code>.
     */
    public final TableField<UcAccountRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.nick_name</code>.
     */
    public final TableField<UcAccountRecord, String> NICK_NAME = createField(DSL.name("nick_name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.industry1</code>.
     */
    public final TableField<UcAccountRecord, Integer> INDUSTRY1 = createField(DSL.name("industry1"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.industry2</code>.
     */
    public final TableField<UcAccountRecord, Integer> INDUSTRY2 = createField(DSL.name("industry2"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.industry3</code>.
     */
    public final TableField<UcAccountRecord, Integer> INDUSTRY3 = createField(DSL.name("industry3"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.account_type</code>.
     */
    public final TableField<UcAccountRecord, Integer> ACCOUNT_TYPE = createField(DSL.name("account_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.review_state</code>.
     */
    public final TableField<UcAccountRecord, Integer> REVIEW_STATE = createField(DSL.name("review_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'13'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.finance_state</code>.
     */
    public final TableField<UcAccountRecord, Integer> FINANCE_STATE = createField(DSL.name("finance_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.view_state</code>.
     */
    public final TableField<UcAccountRecord, Integer> VIEW_STATE = createField(DSL.name("view_state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.group_name</code>.
     */
    public final TableField<UcAccountRecord, String> GROUP_NAME = createField(DSL.name("group_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.roles</code>.
     */
    public final TableField<UcAccountRecord, String> ROLES = createField(DSL.name("roles"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.source</code>.
     */
    public final TableField<UcAccountRecord, Integer> SOURCE = createField(DSL.name("source"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.create_time</code>.
     */
    public final TableField<UcAccountRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'1970-01-01 08:00:01'", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.modify_time</code>.
     */
    public final TableField<UcAccountRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.first_recharge_time</code>.
     */
    public final TableField<UcAccountRecord, LocalDateTime> FIRST_RECHARGE_TIME = createField(DSL.name("first_recharge_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.last_login_time</code>.
     */
    public final TableField<UcAccountRecord, LocalDateTime> LAST_LOGIN_TIME = createField(DSL.name("last_login_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.first_available_time</code>.
     */
    public final TableField<UcAccountRecord, LocalDateTime> FIRST_AVAILABLE_TIME = createField(DSL.name("first_available_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>audit_wolong.uc_account.deleted</code>.
     */
    public final TableField<UcAccountRecord, Integer> DELETED = createField(DSL.name("deleted"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "");

    private UcAccount(Name alias, Table<UcAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private UcAccount(Name alias, Table<UcAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_wolong.uc_account</code> table reference
     */
    public UcAccount(String alias) {
        this(DSL.name(alias), UC_ACCOUNT);
    }

    /**
     * Create an aliased <code>audit_wolong.uc_account</code> table reference
     */
    public UcAccount(Name alias) {
        this(alias, UC_ACCOUNT);
    }

    /**
     * Create a <code>audit_wolong.uc_account</code> table reference
     */
    public UcAccount() {
        this(DSL.name("uc_account"), null);
    }

    public <O extends Record> UcAccount(Table<O> child, ForeignKey<O, UcAccountRecord> key) {
        super(child, key, UC_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditWolong.AUDIT_WOLONG;
    }

    @Override
    public UniqueKey<UcAccountRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    public UcAccount as(String alias) {
        return new UcAccount(DSL.name(alias), this);
    }

    @Override
    public UcAccount as(Name alias) {
        return new UcAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UcAccount rename(String name) {
        return new UcAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UcAccount rename(Name name) {
        return new UcAccount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, String, String, Integer, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
