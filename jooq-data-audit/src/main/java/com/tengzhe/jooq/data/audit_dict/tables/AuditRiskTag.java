/*
 * This file is generated by jOOQ.
 */
package com.tengzhe.jooq.data.audit_dict.tables;


import com.jooq.predefine.converter.LocalDateTimeConverter;
import com.tengzhe.jooq.data.audit_dict.AuditDict;
import com.tengzhe.jooq.data.audit_dict.Keys;
import com.tengzhe.jooq.data.audit_dict.tables.records.AuditRiskTagRecord;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditRiskTag extends TableImpl<AuditRiskTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_dict.audit_risk_tag</code>
     */
    public static final AuditRiskTag AUDIT_RISK_TAG = new AuditRiskTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditRiskTagRecord> getRecordType() {
        return AuditRiskTagRecord.class;
    }

    /**
     * The column <code>audit_dict.audit_risk_tag.id</code>.
     */
    public final TableField<AuditRiskTagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_dict.audit_risk_tag.code</code>.
     */
    public final TableField<AuditRiskTagRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_dict.audit_risk_tag.target</code>.
     */
    public final TableField<AuditRiskTagRecord, Integer> TARGET = createField(DSL.name("target"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.audit_risk_tag.reason_detail</code>.
     */
    public final TableField<AuditRiskTagRecord, String> REASON_DETAIL = createField(DSL.name("reason_detail"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_dict.audit_risk_tag.additional</code>.
     */
    public final TableField<AuditRiskTagRecord, Integer> ADDITIONAL = createField(DSL.name("additional"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.audit_risk_tag.strategy_flag</code>.
     */
    public final TableField<AuditRiskTagRecord, Integer> STRATEGY_FLAG = createField(DSL.name("strategy_flag"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.audit_risk_tag.enabled</code>.
     */
    public final TableField<AuditRiskTagRecord, Integer> ENABLED = createField(DSL.name("enabled"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.audit_risk_tag.remark</code>.
     */
    public final TableField<AuditRiskTagRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_dict.audit_risk_tag.operator_id</code>.
     */
    public final TableField<AuditRiskTagRecord, Long> OPERATOR_ID = createField(DSL.name("operator_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_dict.audit_risk_tag.seq</code>.
     */
    public final TableField<AuditRiskTagRecord, Integer> SEQ = createField(DSL.name("seq"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.audit_risk_tag.create_time</code>.
     */
    public final TableField<AuditRiskTagRecord, Date> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeConverter());

    /**
     * The column <code>audit_dict.audit_risk_tag.modify_time</code>.
     */
    public final TableField<AuditRiskTagRecord, Date> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeConverter());

    private AuditRiskTag(Name alias, Table<AuditRiskTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditRiskTag(Name alias, Table<AuditRiskTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_dict.audit_risk_tag</code> table reference
     */
    public AuditRiskTag(String alias) {
        this(DSL.name(alias), AUDIT_RISK_TAG);
    }

    /**
     * Create an aliased <code>audit_dict.audit_risk_tag</code> table reference
     */
    public AuditRiskTag(Name alias) {
        this(alias, AUDIT_RISK_TAG);
    }

    /**
     * Create a <code>audit_dict.audit_risk_tag</code> table reference
     */
    public AuditRiskTag() {
        this(DSL.name("audit_risk_tag"), null);
    }

    public <O extends Record> AuditRiskTag(Table<O> child, ForeignKey<O, AuditRiskTagRecord> key) {
        super(child, key, AUDIT_RISK_TAG);
    }

    @Override
    public Schema getSchema() {
        return AuditDict.AUDIT_DICT;
    }

    @Override
    public Identity<AuditRiskTagRecord, Long> getIdentity() {
        return (Identity<AuditRiskTagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditRiskTagRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    @Override
    public List<UniqueKey<AuditRiskTagRecord>> getKeys() {
        return Arrays.<UniqueKey<AuditRiskTagRecord>>asList(Keys.CONSTRAINT_1);
    }

    @Override
    public AuditRiskTag as(String alias) {
        return new AuditRiskTag(DSL.name(alias), this);
    }

    @Override
    public AuditRiskTag as(Name alias) {
        return new AuditRiskTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditRiskTag rename(String name) {
        return new AuditRiskTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditRiskTag rename(Name name) {
        return new AuditRiskTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, Integer, String, Integer, Integer, Integer, String, Long, Integer, Date, Date> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
