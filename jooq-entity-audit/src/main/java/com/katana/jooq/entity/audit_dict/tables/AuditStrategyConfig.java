/*
 * This file is generated by jOOQ.
 */
package com.katana.jooq.entity.audit_dict.tables;


import com.katana.jooq.entity.audit_dict.AuditDict;
import com.katana.jooq.entity.audit_dict.Keys;
import com.katana.jooq.entity.audit_dict.tables.records.AuditStrategyConfigRecord;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import com.cudrania.jooq.converter.LocalDateTimeConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditStrategyConfig extends TableImpl<AuditStrategyConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_dict.audit_strategy_config</code>
     */
    public static final AuditStrategyConfig AUDIT_STRATEGY_CONFIG = new AuditStrategyConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditStrategyConfigRecord> getRecordType() {
        return AuditStrategyConfigRecord.class;
    }

    /**
     * The column <code>audit_dict.audit_strategy_config.id</code>.
     */
    public final TableField<AuditStrategyConfigRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_dict.audit_strategy_config.name</code>.
     */
    public final TableField<AuditStrategyConfigRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_dict.audit_strategy_config.type</code>.
     */
    public final TableField<AuditStrategyConfigRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_dict.audit_strategy_config.enabled</code>.
     */
    public final TableField<AuditStrategyConfigRecord, Integer> ENABLED = createField(DSL.name("enabled"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.audit_strategy_config.create_time</code>.
     */
    public final TableField<AuditStrategyConfigRecord, Date> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeConverter());

    /**
     * The column <code>audit_dict.audit_strategy_config.modify_time</code>.
     */
    public final TableField<AuditStrategyConfigRecord, Date> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeConverter());

    private AuditStrategyConfig(Name alias, Table<AuditStrategyConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditStrategyConfig(Name alias, Table<AuditStrategyConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_dict.audit_strategy_config</code> table reference
     */
    public AuditStrategyConfig(String alias) {
        this(DSL.name(alias), AUDIT_STRATEGY_CONFIG);
    }

    /**
     * Create an aliased <code>audit_dict.audit_strategy_config</code> table reference
     */
    public AuditStrategyConfig(Name alias) {
        this(alias, AUDIT_STRATEGY_CONFIG);
    }

    /**
     * Create a <code>audit_dict.audit_strategy_config</code> table reference
     */
    public AuditStrategyConfig() {
        this(DSL.name("audit_strategy_config"), null);
    }

    public <O extends Record> AuditStrategyConfig(Table<O> child, ForeignKey<O, AuditStrategyConfigRecord> key) {
        super(child, key, AUDIT_STRATEGY_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return AuditDict.AUDIT_DICT;
    }

    @Override
    public Identity<AuditStrategyConfigRecord, Long> getIdentity() {
        return (Identity<AuditStrategyConfigRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditStrategyConfigRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9C;
    }

    @Override
    public List<UniqueKey<AuditStrategyConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<AuditStrategyConfigRecord>>asList(Keys.CONSTRAINT_9C);
    }

    @Override
    public AuditStrategyConfig as(String alias) {
        return new AuditStrategyConfig(DSL.name(alias), this);
    }

    @Override
    public AuditStrategyConfig as(Name alias) {
        return new AuditStrategyConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditStrategyConfig rename(String name) {
        return new AuditStrategyConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditStrategyConfig rename(Name name) {
        return new AuditStrategyConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, Integer, Date, Date> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
