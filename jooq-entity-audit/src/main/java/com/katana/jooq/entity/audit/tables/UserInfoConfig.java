/*
 * This file is generated by jOOQ.
 */
package com.katana.jooq.entity.audit.tables;


import com.katana.jooq.entity.audit.Audit;
import com.katana.jooq.entity.audit.Indexes;
import com.katana.jooq.entity.audit.Keys;
import com.katana.jooq.entity.audit.tables.records.UserInfoConfigRecord;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.plus.converter.LocalDateTimeConverter;


/**
 * 用户配置表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserInfoConfig extends TableImpl<UserInfoConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit.user_info_config</code>
     */
    public static final UserInfoConfig USER_INFO_CONFIG = new UserInfoConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserInfoConfigRecord> getRecordType() {
        return UserInfoConfigRecord.class;
    }

    /**
     * The column <code>audit.user_info_config.id</code>. 主键
     */
    public final TableField<UserInfoConfigRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>audit.user_info_config.userid</code>. 用户id
     */
    public final TableField<UserInfoConfigRecord, Long> USERID = createField(DSL.name("userid"), SQLDataType.BIGINT.nullable(false), this, "用户id");

    /**
     * The column <code>audit.user_info_config.priority</code>.
     * 优先级：-1表示搁置、0正常、&gt;0表示优审，优审账户的物料会被优先领取（priority desc）
     */
    public final TableField<UserInfoConfigRecord, Long> PRIORITY = createField(DSL.name("priority"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.BIGINT)), this, "优先级：-1表示搁置、0正常、>0表示优审，优审账户的物料会被优先领取（priority desc）");

    /**
     * The column <code>audit.user_info_config.max_version</code>. 最大版本号
     */
    public final TableField<UserInfoConfigRecord, Long> MAX_VERSION = createField(DSL.name("max_version"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.BIGINT)), this, "最大版本号");

    /**
     * The column <code>audit.user_info_config.min_version</code>.
     * 最小版本，主要是在领单时用，min_version越小表示需要优先领取
     */
    public final TableField<UserInfoConfigRecord, Long> MIN_VERSION = createField(DSL.name("min_version"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.BIGINT)), this, "最小版本，主要是在领单时用，min_version越小表示需要优先领取");

    /**
     * The column <code>audit.user_info_config.create_time</code>. 创建时间
     */
    public final TableField<UserInfoConfigRecord, Date> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("'2010-01-01 00:00:00'", SQLDataType.LOCALDATETIME)), this, "创建时间", new LocalDateTimeConverter());

    /**
     * The column <code>audit.user_info_config.modify_time</code>. 修改时间
     */
    public final TableField<UserInfoConfigRecord, Date> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "修改时间", new LocalDateTimeConverter());

    /**
     * The column <code>audit.user_info_config.auditor_id</code>.
     * 审核员id:-1表示未被任何审核员修改优先级，&gt;0表示最后修改优先级的审核员id
     */
    public final TableField<UserInfoConfigRecord, Long> AUDITOR_ID = createField(DSL.name("auditor_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'", SQLDataType.BIGINT)), this, "审核员id:-1表示未被任何审核员修改优先级，>0表示最后修改优先级的审核员id");

    /**
     * The column <code>audit.user_info_config.env</code>. 环境
     */
    public final TableField<UserInfoConfigRecord, String> ENV = createField(DSL.name("env"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "环境");

    private UserInfoConfig(Name alias, Table<UserInfoConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserInfoConfig(Name alias, Table<UserInfoConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户配置表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit.user_info_config</code> table reference
     */
    public UserInfoConfig(String alias) {
        this(DSL.name(alias), USER_INFO_CONFIG);
    }

    /**
     * Create an aliased <code>audit.user_info_config</code> table reference
     */
    public UserInfoConfig(Name alias) {
        this(alias, USER_INFO_CONFIG);
    }

    /**
     * Create a <code>audit.user_info_config</code> table reference
     */
    public UserInfoConfig() {
        this(DSL.name("user_info_config"), null);
    }

    public <O extends Record> UserInfoConfig(Table<O> child, ForeignKey<O, UserInfoConfigRecord> key) {
        super(child, key, USER_INFO_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Audit.AUDIT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_INFO_CONFIG_PRIORITY);
    }

    @Override
    public Identity<UserInfoConfigRecord, Long> getIdentity() {
        return (Identity<UserInfoConfigRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserInfoConfigRecord> getPrimaryKey() {
        return Keys.USER_INFO_CONFIG_PRIMARY_KEY;
    }

    @Override
    public List<UniqueKey<UserInfoConfigRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_INFO_CONFIG_USERID);
    }

    @Override
    public UserInfoConfig as(String alias) {
        return new UserInfoConfig(DSL.name(alias), this);
    }

    @Override
    public UserInfoConfig as(Name alias) {
        return new UserInfoConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfoConfig rename(String name) {
        return new UserInfoConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfoConfig rename(Name name) {
        return new UserInfoConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, Long, Long, Date, Date, Long, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
