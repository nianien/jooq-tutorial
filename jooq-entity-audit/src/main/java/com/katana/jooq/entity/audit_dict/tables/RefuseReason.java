/*
 * This file is generated by jOOQ.
 */
package com.katana.jooq.entity.audit_dict.tables;


import com.katana.jooq.entity.audit_dict.AuditDict;
import com.katana.jooq.entity.audit_dict.Keys;
import com.katana.jooq.entity.audit_dict.tables.records.RefuseReasonRecord;

import java.util.Date;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.plus.converter.LocalDateTimeConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefuseReason extends TableImpl<RefuseReasonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_dict.refuse_reason</code>
     */
    public static final RefuseReason REFUSE_REASON = new RefuseReason();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefuseReasonRecord> getRecordType() {
        return RefuseReasonRecord.class;
    }

    /**
     * The column <code>audit_dict.refuse_reason.id</code>.
     */
    public final TableField<RefuseReasonRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.code</code>.
     */
    public final TableField<RefuseReasonRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(20).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.reason</code>.
     */
    public final TableField<RefuseReasonRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.reason_detail</code>.
     */
    public final TableField<RefuseReasonRecord, String> REASON_DETAIL = createField(DSL.name("reason_detail"), SQLDataType.VARCHAR(128).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.audit_type</code>.
     */
    public final TableField<RefuseReasonRecord, Integer> AUDIT_TYPE = createField(DSL.name("audit_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.order_id</code>.
     */
    public final TableField<RefuseReasonRecord, Integer> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.app_id</code>.
     */
    public final TableField<RefuseReasonRecord, Integer> APP_ID = createField(DSL.name("app_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'10'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.additionable</code>.
     */
    public final TableField<RefuseReasonRecord, Integer> ADDITIONABLE = createField(DSL.name("additionable"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.level</code>.
     */
    public final TableField<RefuseReasonRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'1'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.parent_id</code>.
     */
    public final TableField<RefuseReasonRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.show_status</code>.
     */
    public final TableField<RefuseReasonRecord, Integer> SHOW_STATUS = createField(DSL.name("show_status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.refuse_reason.create_time</code>.
     */
    public final TableField<RefuseReasonRecord, Date> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeConverter());

    private RefuseReason(Name alias, Table<RefuseReasonRecord> aliased) {
        this(alias, aliased, null);
    }

    private RefuseReason(Name alias, Table<RefuseReasonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_dict.refuse_reason</code> table reference
     */
    public RefuseReason(String alias) {
        this(DSL.name(alias), REFUSE_REASON);
    }

    /**
     * Create an aliased <code>audit_dict.refuse_reason</code> table reference
     */
    public RefuseReason(Name alias) {
        this(alias, REFUSE_REASON);
    }

    /**
     * Create a <code>audit_dict.refuse_reason</code> table reference
     */
    public RefuseReason() {
        this(DSL.name("refuse_reason"), null);
    }

    public <O extends Record> RefuseReason(Table<O> child, ForeignKey<O, RefuseReasonRecord> key) {
        super(child, key, REFUSE_REASON);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditDict.AUDIT_DICT;
    }

    @Override
    public Identity<RefuseReasonRecord, Integer> getIdentity() {
        return (Identity<RefuseReasonRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RefuseReasonRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_38;
    }

    @Override
    public RefuseReason as(String alias) {
        return new RefuseReason(DSL.name(alias), this);
    }

    @Override
    public RefuseReason as(Name alias) {
        return new RefuseReason(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefuseReason rename(String name) {
        return new RefuseReason(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefuseReason rename(Name name) {
        return new RefuseReason(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Date> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
