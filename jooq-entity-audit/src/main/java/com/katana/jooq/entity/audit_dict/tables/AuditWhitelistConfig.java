/*
 * This file is generated by jOOQ.
 */
package com.katana.jooq.entity.audit_dict.tables;


import com.katana.jooq.entity.audit_dict.AuditDict;
import com.katana.jooq.entity.audit_dict.Keys;
import com.katana.jooq.entity.audit_dict.tables.records.AuditWhitelistConfigRecord;

import java.util.Date;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.plus.converter.LocalDateTimeConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditWhitelistConfig extends TableImpl<AuditWhitelistConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_dict.audit_whitelist_config</code>
     */
    public static final AuditWhitelistConfig AUDIT_WHITELIST_CONFIG = new AuditWhitelistConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditWhitelistConfigRecord> getRecordType() {
        return AuditWhitelistConfigRecord.class;
    }

    /**
     * The column <code>audit_dict.audit_whitelist_config.id</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>audit_dict.audit_whitelist_config.cid</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, Long> CID = createField(DSL.name("cid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_dict.audit_whitelist_config.site_url</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, String> SITE_URL = createField(DSL.name("site_url"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_dict.audit_whitelist_config.uc_id</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, Long> UC_ID = createField(DSL.name("uc_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_dict.audit_whitelist_config.biz_types</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, String> BIZ_TYPES = createField(DSL.name("biz_types"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>audit_dict.audit_whitelist_config.target_type</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, Integer> TARGET_TYPE = createField(DSL.name("target_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("-1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.audit_whitelist_config.dimension</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, Integer> DIMENSION = createField(DSL.name("dimension"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>audit_dict.audit_whitelist_config.auditor_id</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, Long> AUDITOR_ID = createField(DSL.name("auditor_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("-1", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit_dict.audit_whitelist_config.status</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit_dict.audit_whitelist_config.create_time</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, Date> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeConverter());

    /**
     * The column <code>audit_dict.audit_whitelist_config.modify_time</code>.
     */
    public final TableField<AuditWhitelistConfigRecord, Date> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeConverter());

    private AuditWhitelistConfig(Name alias, Table<AuditWhitelistConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditWhitelistConfig(Name alias, Table<AuditWhitelistConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>audit_dict.audit_whitelist_config</code> table
     * reference
     */
    public AuditWhitelistConfig(String alias) {
        this(DSL.name(alias), AUDIT_WHITELIST_CONFIG);
    }

    /**
     * Create an aliased <code>audit_dict.audit_whitelist_config</code> table
     * reference
     */
    public AuditWhitelistConfig(Name alias) {
        this(alias, AUDIT_WHITELIST_CONFIG);
    }

    /**
     * Create a <code>audit_dict.audit_whitelist_config</code> table reference
     */
    public AuditWhitelistConfig() {
        this(DSL.name("audit_whitelist_config"), null);
    }

    public <O extends Record> AuditWhitelistConfig(Table<O> child, ForeignKey<O, AuditWhitelistConfigRecord> key) {
        super(child, key, AUDIT_WHITELIST_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuditDict.AUDIT_DICT;
    }

    @Override
    public Identity<AuditWhitelistConfigRecord, Long> getIdentity() {
        return (Identity<AuditWhitelistConfigRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditWhitelistConfigRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_A;
    }

    @Override
    public AuditWhitelistConfig as(String alias) {
        return new AuditWhitelistConfig(DSL.name(alias), this);
    }

    @Override
    public AuditWhitelistConfig as(Name alias) {
        return new AuditWhitelistConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditWhitelistConfig rename(String name) {
        return new AuditWhitelistConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditWhitelistConfig rename(Name name) {
        return new AuditWhitelistConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, String, Long, String, Integer, Integer, Long, Integer, Date, Date> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
