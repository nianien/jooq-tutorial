/*
 * This file is generated by jOOQ.
 */
package com.katana.jooq.entity.audit_dict;


import com.katana.jooq.entity.audit_dict.tables.AuditRiskCategory;
import com.katana.jooq.entity.audit_dict.tables.AuditRiskTag;
import com.katana.jooq.entity.audit_dict.tables.AuditSimilarWord;
import com.katana.jooq.entity.audit_dict.tables.AuditStrategyConfig;
import com.katana.jooq.entity.audit_dict.tables.AuditTypeRiskTagConfig;
import com.katana.jooq.entity.audit_dict.tables.AuditWhitelistConfig;
import com.katana.jooq.entity.audit_dict.tables.AuditWordRule;
import com.katana.jooq.entity.audit_dict.tables.FlatRiskCustomerRule;
import com.katana.jooq.entity.audit_dict.tables.RefuseReason;
import com.katana.jooq.entity.audit_dict.tables.RiskCustomerRule;
import com.katana.jooq.entity.audit_dict.tables.RuleEvaluateDetail;
import com.katana.jooq.entity.audit_dict.tables.SyncWordRule;
import com.katana.jooq.entity.audit_dict.tables.SystemProperty;
import com.katana.jooq.entity.audit_dict.tables.records.AuditRiskCategoryRecord;
import com.katana.jooq.entity.audit_dict.tables.records.AuditRiskTagRecord;
import com.katana.jooq.entity.audit_dict.tables.records.AuditSimilarWordRecord;
import com.katana.jooq.entity.audit_dict.tables.records.AuditStrategyConfigRecord;
import com.katana.jooq.entity.audit_dict.tables.records.AuditTypeRiskTagConfigRecord;
import com.katana.jooq.entity.audit_dict.tables.records.AuditWhitelistConfigRecord;
import com.katana.jooq.entity.audit_dict.tables.records.AuditWordRuleRecord;
import com.katana.jooq.entity.audit_dict.tables.records.FlatRiskCustomerRuleRecord;
import com.katana.jooq.entity.audit_dict.tables.records.RefuseReasonRecord;
import com.katana.jooq.entity.audit_dict.tables.records.RiskCustomerRuleRecord;
import com.katana.jooq.entity.audit_dict.tables.records.RuleEvaluateDetailRecord;
import com.katana.jooq.entity.audit_dict.tables.records.SyncWordRuleRecord;
import com.katana.jooq.entity.audit_dict.tables.records.SystemPropertyRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * audit_dict.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuditRiskCategoryRecord> CONSTRAINT_B = Internal.createUniqueKey(AuditRiskCategory.AUDIT_RISK_CATEGORY, DSL.name("CONSTRAINT_B"), new TableField[] { AuditRiskCategory.AUDIT_RISK_CATEGORY.ID }, true);
    public static final UniqueKey<AuditRiskTagRecord> CONSTRAINT_1 = Internal.createUniqueKey(AuditRiskTag.AUDIT_RISK_TAG, DSL.name("CONSTRAINT_1"), new TableField[] { AuditRiskTag.AUDIT_RISK_TAG.ID }, true);
    public static final UniqueKey<AuditSimilarWordRecord> CONSTRAINT_2 = Internal.createUniqueKey(AuditSimilarWord.AUDIT_SIMILAR_WORD, DSL.name("CONSTRAINT_2"), new TableField[] { AuditSimilarWord.AUDIT_SIMILAR_WORD.ID }, true);
    public static final UniqueKey<AuditStrategyConfigRecord> CONSTRAINT_9C = Internal.createUniqueKey(AuditStrategyConfig.AUDIT_STRATEGY_CONFIG, DSL.name("CONSTRAINT_9C"), new TableField[] { AuditStrategyConfig.AUDIT_STRATEGY_CONFIG.ID }, true);
    public static final UniqueKey<AuditTypeRiskTagConfigRecord> CONSTRAINT_9 = Internal.createUniqueKey(AuditTypeRiskTagConfig.AUDIT_TYPE_RISK_TAG_CONFIG, DSL.name("CONSTRAINT_9"), new TableField[] { AuditTypeRiskTagConfig.AUDIT_TYPE_RISK_TAG_CONFIG.ID }, true);
    public static final UniqueKey<AuditWhitelistConfigRecord> CONSTRAINT_A = Internal.createUniqueKey(AuditWhitelistConfig.AUDIT_WHITELIST_CONFIG, DSL.name("CONSTRAINT_A"), new TableField[] { AuditWhitelistConfig.AUDIT_WHITELIST_CONFIG.ID }, true);
    public static final UniqueKey<AuditWordRuleRecord> CONSTRAINT_E = Internal.createUniqueKey(AuditWordRule.AUDIT_WORD_RULE, DSL.name("CONSTRAINT_E"), new TableField[] { AuditWordRule.AUDIT_WORD_RULE.ID }, true);
    public static final UniqueKey<FlatRiskCustomerRuleRecord> CONSTRAINT_3 = Internal.createUniqueKey(FlatRiskCustomerRule.FLAT_RISK_CUSTOMER_RULE, DSL.name("CONSTRAINT_3"), new TableField[] { FlatRiskCustomerRule.FLAT_RISK_CUSTOMER_RULE.ID }, true);
    public static final UniqueKey<RefuseReasonRecord> CONSTRAINT_38 = Internal.createUniqueKey(RefuseReason.REFUSE_REASON, DSL.name("CONSTRAINT_38"), new TableField[] { RefuseReason.REFUSE_REASON.ID }, true);
    public static final UniqueKey<RiskCustomerRuleRecord> CONSTRAINT_D = Internal.createUniqueKey(RiskCustomerRule.RISK_CUSTOMER_RULE, DSL.name("CONSTRAINT_D"), new TableField[] { RiskCustomerRule.RISK_CUSTOMER_RULE.ID }, true);
    public static final UniqueKey<RuleEvaluateDetailRecord> CONSTRAINT_E2 = Internal.createUniqueKey(RuleEvaluateDetail.RULE_EVALUATE_DETAIL, DSL.name("CONSTRAINT_E2"), new TableField[] { RuleEvaluateDetail.RULE_EVALUATE_DETAIL.ID }, true);
    public static final UniqueKey<SyncWordRuleRecord> CONSTRAINT_F = Internal.createUniqueKey(SyncWordRule.SYNC_WORD_RULE, DSL.name("CONSTRAINT_F"), new TableField[] { SyncWordRule.SYNC_WORD_RULE.ID }, true);
    public static final UniqueKey<SystemPropertyRecord> CONSTRAINT_4 = Internal.createUniqueKey(SystemProperty.SYSTEM_PROPERTY, DSL.name("CONSTRAINT_4"), new TableField[] { SystemProperty.SYSTEM_PROPERTY.ID }, true);
}
